/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See OSSREADME.json in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-bitwise
var CharCode;
(function (CharCode) {
    CharCode[CharCode["Slash"] = 47] = "Slash";
    CharCode[CharCode["Backslash"] = 92] = "Backslash";
})(CharCode = exports.CharCode || (exports.CharCode = {}));
/**
 * @returns the directory name of a path.
 */
function dirname(path) {
    const idx = ~path.lastIndexOf('/') || ~path.lastIndexOf('\\');
    if (idx === 0) {
        return '.';
    }
    else if (~idx === 0) {
        return path[0];
    }
    else {
        return path.substring(0, ~idx);
    }
}
exports.dirname = dirname;
/**
 * @returns the base name of a path.
 */
function basename(path) {
    const idx = ~path.lastIndexOf('/') || ~path.lastIndexOf('\\');
    if (idx === 0) {
        return path;
    }
    else if (~idx === path.length - 1) {
        return basename(path.substring(0, path.length - 1));
    }
    else {
        return path.substr(~idx + 1);
    }
}
exports.basename = basename;
/**
 * @returns {{.far}} from boo.far or the empty string.
 */
function extname(path) {
    path = basename(path);
    const idx = ~path.lastIndexOf('.');
    return idx ? path.substring(~idx) : '';
}
exports.extname = extname;
exports.join = (...parts) => {
    // Not using a function with var-args because of how TS compiles
    // them to JS - it would result in 2*n runtime cost instead
    // of 1*n, where n is parts.length.
    let value = '';
    for (let i = 0; i < parts.length; i++) {
        const part = parts[i];
        if (i > 0) {
            // add the separater between two parts unless
            // there already is one
            const last = value.charCodeAt(value.length - 1);
            if (last !== 47 /* Slash */ && last !== 92 /* Backslash */) {
                const next = part.charCodeAt(0);
                if (next !== 47 /* Slash */ && next !== 92 /* Backslash */) {
                    value += '/';
                }
            }
        }
        value += part;
    }
    return value;
};
//# sourceMappingURL=paths.js.map