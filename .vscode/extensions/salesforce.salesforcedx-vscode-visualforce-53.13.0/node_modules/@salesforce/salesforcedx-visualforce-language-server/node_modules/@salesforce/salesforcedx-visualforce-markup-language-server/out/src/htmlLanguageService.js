/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See OSSREADME.json in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
exports.CompletionItem = vscode_languageserver_types_1.CompletionItem;
exports.CompletionList = vscode_languageserver_types_1.CompletionList;
exports.Diagnostic = vscode_languageserver_types_1.Diagnostic;
exports.DocumentHighlight = vscode_languageserver_types_1.DocumentHighlight;
exports.DocumentLink = vscode_languageserver_types_1.DocumentLink;
exports.FormattingOptions = vscode_languageserver_types_1.FormattingOptions;
exports.MarkedString = vscode_languageserver_types_1.MarkedString;
exports.Position = vscode_languageserver_types_1.Position;
exports.Range = vscode_languageserver_types_1.Range;
exports.SymbolInformation = vscode_languageserver_types_1.SymbolInformation;
exports.TextDocument = vscode_languageserver_types_1.TextDocument;
exports.TextEdit = vscode_languageserver_types_1.TextEdit;
const htmlParser_1 = require("./parser/htmlParser");
const htmlScanner_1 = require("./parser/htmlScanner");
const htmlCompletion_1 = require("./services/htmlCompletion");
const htmlFormatter_1 = require("./services/htmlFormatter");
const htmlHighlighting_1 = require("./services/htmlHighlighting");
const htmlHover_1 = require("./services/htmlHover");
const htmlLinks_1 = require("./services/htmlLinks");
const htmlSymbolsProvider_1 = require("./services/htmlSymbolsProvider");
var TokenType;
(function (TokenType) {
    TokenType[TokenType["StartCommentTag"] = 0] = "StartCommentTag";
    TokenType[TokenType["Comment"] = 1] = "Comment";
    TokenType[TokenType["EndCommentTag"] = 2] = "EndCommentTag";
    TokenType[TokenType["StartTagOpen"] = 3] = "StartTagOpen";
    TokenType[TokenType["StartTagClose"] = 4] = "StartTagClose";
    TokenType[TokenType["StartTagSelfClose"] = 5] = "StartTagSelfClose";
    TokenType[TokenType["StartTag"] = 6] = "StartTag";
    TokenType[TokenType["EndTagOpen"] = 7] = "EndTagOpen";
    TokenType[TokenType["EndTagClose"] = 8] = "EndTagClose";
    TokenType[TokenType["EndTag"] = 9] = "EndTag";
    TokenType[TokenType["DelimiterAssign"] = 10] = "DelimiterAssign";
    TokenType[TokenType["AttributeName"] = 11] = "AttributeName";
    TokenType[TokenType["AttributeValue"] = 12] = "AttributeValue";
    TokenType[TokenType["StartDoctypeTag"] = 13] = "StartDoctypeTag";
    TokenType[TokenType["Doctype"] = 14] = "Doctype";
    TokenType[TokenType["EndDoctypeTag"] = 15] = "EndDoctypeTag";
    TokenType[TokenType["Content"] = 16] = "Content";
    TokenType[TokenType["Whitespace"] = 17] = "Whitespace";
    TokenType[TokenType["Unknown"] = 18] = "Unknown";
    TokenType[TokenType["Script"] = 19] = "Script";
    TokenType[TokenType["Styles"] = 20] = "Styles";
    TokenType[TokenType["EOS"] = 21] = "EOS";
})(TokenType = exports.TokenType || (exports.TokenType = {}));
var ScannerState;
(function (ScannerState) {
    ScannerState[ScannerState["WithinContent"] = 0] = "WithinContent";
    ScannerState[ScannerState["AfterOpeningStartTag"] = 1] = "AfterOpeningStartTag";
    ScannerState[ScannerState["AfterOpeningEndTag"] = 2] = "AfterOpeningEndTag";
    ScannerState[ScannerState["WithinDoctype"] = 3] = "WithinDoctype";
    ScannerState[ScannerState["WithinTag"] = 4] = "WithinTag";
    ScannerState[ScannerState["WithinEndTag"] = 5] = "WithinEndTag";
    ScannerState[ScannerState["WithinComment"] = 6] = "WithinComment";
    ScannerState[ScannerState["WithinScriptContent"] = 7] = "WithinScriptContent";
    ScannerState[ScannerState["WithinStyleContent"] = 8] = "WithinStyleContent";
    ScannerState[ScannerState["AfterAttributeName"] = 9] = "AfterAttributeName";
    ScannerState[ScannerState["BeforeAttributeValue"] = 10] = "BeforeAttributeValue";
})(ScannerState = exports.ScannerState || (exports.ScannerState = {}));
function getLanguageService() {
    return {
        createScanner: htmlScanner_1.createScanner,
        parseHTMLDocument: document => htmlParser_1.parse(document.getText()),
        doComplete: htmlCompletion_1.doComplete,
        doHover: htmlHover_1.doHover,
        format: htmlFormatter_1.format,
        findDocumentHighlights: htmlHighlighting_1.findDocumentHighlights,
        findDocumentLinks: htmlLinks_1.findDocumentLinks,
        findDocumentSymbols: htmlSymbolsProvider_1.findDocumentSymbols,
        doTagComplete: htmlCompletion_1.doTagComplete
    };
}
exports.getLanguageService = getLanguageService;
//# sourceMappingURL=htmlLanguageService.js.map