"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See OSSREADME.json in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
const arrays_1 = require("../utils/arrays");
const htmlScanner_1 = require("./htmlScanner");
const htmlTags_1 = require("./htmlTags");
class Node {
    constructor(start, end, children, parent) {
        this.start = start;
        this.end = end;
        this.children = children;
        this.parent = parent;
    }
    get attributeNames() {
        return Object.keys(this.attributes);
    }
    isSameTag(tagInLowerCase) {
        return (this.tag &&
            tagInLowerCase &&
            this.tag.length === tagInLowerCase.length &&
            this.tag.toLowerCase() === tagInLowerCase);
    }
    get firstChild() {
        return this.children[0];
    }
    get lastChild() {
        return this.children.length
            ? this.children[this.children.length - 1]
            : void 0;
    }
    findNodeBefore(offset) {
        const idx = arrays_1.findFirst(this.children, c => offset <= c.start) - 1;
        if (idx >= 0) {
            const child = this.children[idx];
            if (offset > child.start) {
                if (offset < child.end) {
                    return child.findNodeBefore(offset);
                }
                const lastChild = child.lastChild;
                if (lastChild && lastChild.end === child.end) {
                    return child.findNodeBefore(offset);
                }
                return child;
            }
        }
        return this;
    }
    findNodeAt(offset) {
        const idx = arrays_1.findFirst(this.children, c => offset <= c.start) - 1;
        if (idx >= 0) {
            const child = this.children[idx];
            if (offset > child.start && offset <= child.end) {
                return child.findNodeAt(offset);
            }
        }
        return this;
    }
}
exports.Node = Node;
function parse(text) {
    const scanner = htmlScanner_1.createScanner(text);
    const htmlDocument = new Node(0, text.length, [], null);
    let curr = htmlDocument;
    let endTagStart = -1;
    let pendingAttribute = null;
    let token = scanner.scan();
    let attributes;
    while (token !== htmlScanner_1.TokenType.EOS) {
        switch (token) {
            case htmlScanner_1.TokenType.StartTagOpen:
                const child = new Node(scanner.getTokenOffset(), text.length, [], curr);
                curr.children.push(child);
                curr = child;
                break;
            case htmlScanner_1.TokenType.StartTag:
                curr.tag = scanner.getTokenText();
                break;
            case htmlScanner_1.TokenType.StartTagClose:
                curr.end = scanner.getTokenEnd(); // might be later set to end tag position
                if (htmlTags_1.isEmptyElement(curr.tag) && curr !== htmlDocument) {
                    curr.closed = true;
                    curr = curr.parent;
                }
                break;
            case htmlScanner_1.TokenType.EndTagOpen:
                endTagStart = scanner.getTokenOffset();
                break;
            case htmlScanner_1.TokenType.EndTag:
                const closeTag = scanner.getTokenText().toLowerCase();
                while (!curr.isSameTag(closeTag) && curr !== htmlDocument) {
                    curr.end = endTagStart;
                    curr.closed = false;
                    curr = curr.parent;
                }
                if (curr !== htmlDocument) {
                    curr.closed = true;
                    curr.endTagStart = endTagStart;
                }
                break;
            case htmlScanner_1.TokenType.StartTagSelfClose:
                if (curr !== htmlDocument) {
                    curr.closed = true;
                    curr.end = scanner.getTokenEnd();
                    curr = curr.parent;
                }
                break;
            case htmlScanner_1.TokenType.EndTagClose:
                if (curr !== htmlDocument) {
                    curr.end = scanner.getTokenEnd();
                    curr = curr.parent;
                }
                break;
            case htmlScanner_1.TokenType.AttributeName:
                pendingAttribute = scanner.getTokenText();
                attributes = curr.attributes;
                if (!attributes) {
                    curr.attributes = attributes = {};
                }
                attributes[pendingAttribute] = null; // Support valueless attributes such as 'checked'
                break;
            case htmlScanner_1.TokenType.AttributeValue:
                const value = scanner.getTokenText();
                if (attributes && pendingAttribute) {
                    attributes[pendingAttribute] = value;
                    pendingAttribute = null;
                }
                break;
        }
        token = scanner.scan();
    }
    while (curr !== htmlDocument) {
        curr.end = text.length;
        curr.closed = false;
        curr = curr.parent;
    }
    return {
        roots: htmlDocument.children,
        findNodeBefore: htmlDocument.findNodeBefore.bind(htmlDocument),
        findNodeAt: htmlDocument.findNodeAt.bind(htmlDocument)
    };
}
exports.parse = parse;
//# sourceMappingURL=htmlParser.js.map