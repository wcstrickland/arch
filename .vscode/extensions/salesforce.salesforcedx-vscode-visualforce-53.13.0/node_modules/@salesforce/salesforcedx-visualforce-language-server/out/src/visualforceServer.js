/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See OSSREADME.json in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_1 = require("vscode-languageserver");
const languageModes_1 = require("./modes/languageModes");
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const vscode_languageserver_protocol_2 = require("vscode-languageserver-protocol");
const formatting_1 = require("./modes/formatting");
const arrays_1 = require("./utils/arrays");
const path = require("path");
const url = require("url");
const vscode_uri_1 = require("vscode-uri");
const nls = require("vscode-nls");
nls.config(process.env['VSCODE_NLS_CONFIG']);
// tslint:disable-next-line:no-namespace
var TagCloseRequest;
(function (TagCloseRequest) {
    TagCloseRequest.type = new vscode_languageserver_1.RequestType('html/tag');
})(TagCloseRequest || (TagCloseRequest = {}));
// Create a connection for the server
const connection = vscode_languageserver_1.createConnection();
console.log = connection.console.log.bind(connection.console);
console.error = connection.console.error.bind(connection.console);
// Create a simple text document manager. The text document manager
// supports full document sync only
const documents = new vscode_languageserver_1.TextDocuments();
// Make the text document manager listen on the connection
// for open, change and close text document events
documents.listen(connection);
let workspacePath;
let languageModes;
let clientSnippetSupport = false;
let clientDynamicRegisterSupport = false;
let scopedSettingsSupport = false;
let globalSettings = {};
let documentSettings = {};
// remove document settings on close
documents.onDidClose(e => {
    delete documentSettings[e.document.uri];
});
function getDocumentSettings(textDocument, needsDocumentSettings) {
    if (scopedSettingsSupport && needsDocumentSettings()) {
        let promise = documentSettings[textDocument.uri];
        if (!promise) {
            const scopeUri = textDocument.uri;
            const configRequestParam = {
                items: [
                    { scopeUri, section: 'css' },
                    { scopeUri, section: 'visualforce' },
                    { scopeUri, section: 'javascript' }
                ]
            };
            promise = connection
                .sendRequest(vscode_languageserver_protocol_2.ConfigurationRequest.type, configRequestParam)
                .then(s => ({ css: s[0], visualforce: s[1], javascript: s[2] }));
            documentSettings[textDocument.uri] = promise;
        }
        return promise;
    }
    return Promise.resolve(void 0);
}
// After the server has started the client sends an initilize request. The server receives
// in the passed params the rootPath of the workspace plus the client capabilites
connection.onInitialize((params) => {
    const initializationOptions = params.initializationOptions;
    workspacePath = params.rootPath;
    languageModes = languageModes_1.getLanguageModes(initializationOptions
        ? initializationOptions.embeddedLanguages
        : { css: true, javascript: true });
    documents.onDidClose(e => {
        languageModes.onDocumentRemoved(e.document);
    });
    connection.onShutdown(() => {
        languageModes.dispose();
    });
    function hasClientCapability(...keys) {
        let c = params.capabilities;
        for (let i = 0; c && i < keys.length; i++) {
            c = c[keys[i]];
        }
        return !!c;
    }
    clientSnippetSupport = hasClientCapability('textDocument', 'completion', 'completionItem', 'snippetSupport');
    clientDynamicRegisterSupport = hasClientCapability('workspace', 'symbol', 'dynamicRegistration');
    scopedSettingsSupport = hasClientCapability('workspace', 'configuration');
    const capabilities = {
        // Tell the client that the server works in FULL text document sync mode
        textDocumentSync: documents.syncKind,
        completionProvider: clientSnippetSupport
            ? {
                resolveProvider: true,
                triggerCharacters: ['.', ':', '<', '"', '=', '/', '>']
            }
            : null,
        hoverProvider: true,
        documentHighlightProvider: true,
        documentRangeFormattingProvider: false,
        documentLinkProvider: { resolveProvider: false },
        documentSymbolProvider: true,
        definitionProvider: true,
        signatureHelpProvider: { triggerCharacters: ['('] },
        referencesProvider: true,
        colorProvider: true
    };
    return { capabilities };
});
let formatterRegistration = null;
// The settings have changed. Is send on server activation as well.
connection.onDidChangeConfiguration(change => {
    globalSettings = change.settings;
    documentSettings = {}; // reset all document settings
    languageModes.getAllModes().forEach(m => {
        if (m.configure) {
            m.configure(change.settings);
        }
    });
    documents.all().forEach(triggerValidation);
    // dynamically enable & disable the formatter
    if (clientDynamicRegisterSupport) {
        const enableFormatter = globalSettings &&
            globalSettings.visualforce &&
            globalSettings.visualforce.format &&
            globalSettings.visualforce.format.enable;
        if (enableFormatter) {
            if (!formatterRegistration) {
                const documentSelector = [
                    { language: 'visualforce', scheme: 'file' }
                ];
                formatterRegistration = connection.client.register(vscode_languageserver_1.DocumentRangeFormattingRequest.type, { documentSelector });
            }
        }
        else if (formatterRegistration) {
            formatterRegistration.then(r => r.dispose());
            formatterRegistration = null;
        }
    }
});
const pendingValidationRequests = {};
const validationDelayMs = 200;
// The content of a text document has changed. This event is emitted
// when the text document first opened or when its content has changed.
documents.onDidChangeContent(change => {
    triggerValidation(change.document);
});
// a document has closed: clear all diagnostics
documents.onDidClose(event => {
    cleanPendingValidation(event.document);
    connection.sendDiagnostics({ uri: event.document.uri, diagnostics: [] });
});
function cleanPendingValidation(textDocument) {
    const request = pendingValidationRequests[textDocument.uri];
    if (request) {
        clearTimeout(request);
        delete pendingValidationRequests[textDocument.uri];
    }
}
function triggerValidation(textDocument) {
    cleanPendingValidation(textDocument);
    pendingValidationRequests[textDocument.uri] = setTimeout(() => {
        delete pendingValidationRequests[textDocument.uri];
        // tslint:disable-next-line:no-floating-promises
        validateTextDocument(textDocument);
    }, validationDelayMs);
}
function isValidationEnabled(languageId, settings = globalSettings) {
    const validationSettings = settings && settings.visualforce && settings.visualforce.validate;
    if (validationSettings) {
        return ((languageId === 'css' && validationSettings.styles !== false) ||
            (languageId === 'javascript' && validationSettings.scripts !== false));
    }
    return true;
}
function validateTextDocument(textDocument) {
    return __awaiter(this, void 0, void 0, function* () {
        const diagnostics = [];
        if (textDocument.languageId === 'html') {
            const modes = languageModes.getAllModesInDocument(textDocument);
            const settings = yield getDocumentSettings(textDocument, () => modes.some(m => !!m.doValidation));
            modes.forEach(mode => {
                if (mode.doValidation && isValidationEnabled(mode.getId(), settings)) {
                    arrays_1.pushAll(diagnostics, mode.doValidation(textDocument, settings));
                }
            });
        }
        connection.sendDiagnostics({ uri: textDocument.uri, diagnostics });
    });
}
connection.onCompletion((textDocumentPosition) => __awaiter(void 0, void 0, void 0, function* () {
    const document = documents.get(textDocumentPosition.textDocument.uri);
    const mode = languageModes.getModeAtPosition(document, textDocumentPosition.position);
    if (mode && mode.doComplete) {
        if (mode.getId() !== 'html') {
            connection.telemetry.logEvent({
                key: 'html.embbedded.complete',
                value: { languageId: mode.getId() }
            });
        }
        const settings = yield getDocumentSettings(document, () => mode.doComplete.length > 2);
        return mode.doComplete(document, textDocumentPosition.position, settings);
    }
    return { isIncomplete: true, items: [] };
}));
connection.onCompletionResolve(item => {
    const data = item.data;
    if (data && data.languageId && data.uri) {
        const mode = languageModes.getMode(data.languageId);
        const document = documents.get(data.uri);
        if (mode && mode.doResolve && document) {
            return mode.doResolve(document, item);
        }
    }
    return item;
});
connection.onHover(textDocumentPosition => {
    const document = documents.get(textDocumentPosition.textDocument.uri);
    const mode = languageModes.getModeAtPosition(document, textDocumentPosition.position);
    if (mode && mode.doHover) {
        return mode.doHover(document, textDocumentPosition.position);
    }
    return null;
});
connection.onDocumentHighlight(documentHighlightParams => {
    const document = documents.get(documentHighlightParams.textDocument.uri);
    const mode = languageModes.getModeAtPosition(document, documentHighlightParams.position);
    if (mode && mode.findDocumentHighlight) {
        return mode.findDocumentHighlight(document, documentHighlightParams.position);
    }
    return [];
});
connection.onDefinition(definitionParams => {
    const document = documents.get(definitionParams.textDocument.uri);
    const mode = languageModes.getModeAtPosition(document, definitionParams.position);
    if (mode && mode.findDefinition) {
        return mode.findDefinition(document, definitionParams.position);
    }
    return [];
});
connection.onReferences(referenceParams => {
    const document = documents.get(referenceParams.textDocument.uri);
    const mode = languageModes.getModeAtPosition(document, referenceParams.position);
    if (mode && mode.findReferences) {
        return mode.findReferences(document, referenceParams.position);
    }
    return [];
});
connection.onSignatureHelp(signatureHelpParms => {
    const document = documents.get(signatureHelpParms.textDocument.uri);
    const mode = languageModes.getModeAtPosition(document, signatureHelpParms.position);
    if (mode && mode.doSignatureHelp) {
        return mode.doSignatureHelp(document, signatureHelpParms.position);
    }
    return null;
});
connection.onDocumentRangeFormatting((formatParams) => __awaiter(void 0, void 0, void 0, function* () {
    const document = documents.get(formatParams.textDocument.uri);
    let settings = yield getDocumentSettings(document, () => true);
    if (!settings) {
        settings = globalSettings;
    }
    const unformattedTags = (settings &&
        settings.visualforce &&
        settings.visualforce.format &&
        settings.visualforce.format.unformatted) ||
        '';
    const enabledModes = {
        css: !unformattedTags.match(/\bstyle\b/),
        javascript: !unformattedTags.match(/\bscript\b/)
    };
    return formatting_1.format(languageModes, document, formatParams.range, formatParams.options, settings, enabledModes);
}));
connection.onDocumentLinks(documentLinkParam => {
    const document = documents.get(documentLinkParam.textDocument.uri);
    const documentContext = {
        resolveReference: (ref, base) => {
            if (base) {
                ref = url.resolve(base, ref);
            }
            if (workspacePath && ref[0] === '/') {
                return vscode_uri_1.default.file(path.join(workspacePath, ref)).toString();
            }
            return url.resolve(document.uri, ref);
        }
    };
    const links = [];
    languageModes.getAllModesInDocument(document).forEach(m => {
        if (m.findDocumentLinks) {
            arrays_1.pushAll(links, m.findDocumentLinks(document, documentContext));
        }
    });
    return links;
});
connection.onDocumentSymbol(documentSymbolParms => {
    const document = documents.get(documentSymbolParms.textDocument.uri);
    const symbols = [];
    languageModes.getAllModesInDocument(document).forEach(m => {
        if (m.findDocumentSymbols) {
            arrays_1.pushAll(symbols, m.findDocumentSymbols(document));
        }
    });
    return symbols;
});
connection.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, params => {
    const infos = [];
    const document = documents.get(params.textDocument.uri);
    if (document) {
        languageModes.getAllModesInDocument(document).forEach(m => {
            if (m.findDocumentColors) {
                arrays_1.pushAll(infos, m.findDocumentColors(document));
            }
        });
    }
    return infos;
});
connection.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, params => {
    const document = documents.get(params.textDocument.uri);
    if (document) {
        const mode = languageModes.getModeAtPosition(document, params.range.start);
        if (mode && mode.getColorPresentations) {
            return mode.getColorPresentations(document, params);
        }
    }
    return [];
});
connection.onRequest(TagCloseRequest.type, params => {
    const document = documents.get(params.textDocument.uri);
    if (document) {
        const pos = params.position;
        if (pos.character > 0) {
            const mode = languageModes.getModeAtPosition(document, vscode_languageserver_1.Position.create(pos.line, pos.character - 1));
            if (mode && mode.doAutoClose) {
                return mode.doAutoClose(document, pos);
            }
        }
    }
    return null;
});
// Listen on the connection
connection.listen();
//# sourceMappingURL=visualforceServer.js.map