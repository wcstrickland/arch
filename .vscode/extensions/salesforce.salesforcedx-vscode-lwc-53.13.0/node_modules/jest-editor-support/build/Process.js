"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.filter");

require("core-js/modules/es.array.for-each");

require("core-js/modules/es.array.from");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.array.join");

require("core-js/modules/es.array.slice");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.name");

require("core-js/modules/es.object.define-properties");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-own-property-descriptor");

require("core-js/modules/es.object.get-own-property-descriptors");

require("core-js/modules/es.object.keys");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.for-each");

require("core-js/modules/web.dom-collections.iterator");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createProcess = void 0;

var _child_process = require("child_process");

var _project_workspace = _interopRequireDefault(require("./project_workspace"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Spawns and returns a Jest process with specific args
 *
 * @param {string[]} args
 * @returns {ChildProcess}
 */
// eslint-disable-next-line import/prefer-default-export
var createProcess = function createProcess(workspace, args) {
  var _workspace$nodeEnv;

  var runtimeExecutable = [workspace.jestCommandLine].concat(_toConsumableArray(args)); // If a path to configuration file was defined, push it to runtimeArgs

  if (workspace.pathToConfig) {
    runtimeExecutable.push('--config');
    runtimeExecutable.push(workspace.pathToConfig);
  } // To use our own commands in create-react, we need to tell the command that
  // we're in a CI environment, or it will always append --watch


  var env = _objectSpread(_objectSpread(_objectSpread({}, process.env), (_workspace$nodeEnv = workspace.nodeEnv) !== null && _workspace$nodeEnv !== void 0 ? _workspace$nodeEnv : {}), {}, {
    CI: 'true'
  });

  var spawnOptions = {
    cwd: workspace.rootPath,
    env: env,
    shell: true,
    // for non-windows: run in detached mode so the process will be the group leader and any subsequent process spawned
    // within can be later killed as a group to prevent orphan processes.
    // see https://nodejs.org/api/child_process.html#child_process_options_detached
    detached: process.platform !== 'win32'
  };

  if (workspace.debug) {
    // eslint-disable-next-line no-console
    console.log("spawning process with command=".concat(runtimeExecutable.join(' ')));
  }

  return (0, _child_process.spawn)(runtimeExecutable.join(' '), [], spawnOptions);
};

exports.createProcess = createProcess;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Qcm9jZXNzLmpzIl0sIm5hbWVzIjpbImNyZWF0ZVByb2Nlc3MiLCJ3b3Jrc3BhY2UiLCJhcmdzIiwicnVudGltZUV4ZWN1dGFibGUiLCJqZXN0Q29tbWFuZExpbmUiLCJwYXRoVG9Db25maWciLCJwdXNoIiwiZW52IiwicHJvY2VzcyIsIm5vZGVFbnYiLCJDSSIsInNwYXduT3B0aW9ucyIsImN3ZCIsInJvb3RQYXRoIiwic2hlbGwiLCJkZXRhY2hlZCIsInBsYXRmb3JtIiwiZGVidWciLCJjb25zb2xlIiwibG9nIiwiam9pbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFTQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOzs7Ozs7QUFNQTtBQUNPLElBQU1BLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBQ0MsU0FBRCxFQUE4QkMsSUFBOUIsRUFBb0U7QUFBQTs7QUFDL0YsTUFBTUMsaUJBQWlCLElBQUlGLFNBQVMsQ0FBQ0csZUFBZCw0QkFBa0NGLElBQWxDLEVBQXZCLENBRCtGLENBRy9GOztBQUNBLE1BQUlELFNBQVMsQ0FBQ0ksWUFBZCxFQUE0QjtBQUMxQkYsSUFBQUEsaUJBQWlCLENBQUNHLElBQWxCLENBQXVCLFVBQXZCO0FBQ0FILElBQUFBLGlCQUFpQixDQUFDRyxJQUFsQixDQUF1QkwsU0FBUyxDQUFDSSxZQUFqQztBQUNELEdBUDhGLENBUy9GO0FBQ0E7OztBQUNBLE1BQU1FLEdBQUcsaURBQU9DLE9BQU8sQ0FBQ0QsR0FBZix5QkFBd0JOLFNBQVMsQ0FBQ1EsT0FBbEMsbUVBQTZDLEVBQTdDO0FBQWtEQyxJQUFBQSxFQUFFLEVBQUU7QUFBdEQsSUFBVDs7QUFFQSxNQUFNQyxZQUFZLEdBQUc7QUFDbkJDLElBQUFBLEdBQUcsRUFBRVgsU0FBUyxDQUFDWSxRQURJO0FBRW5CTixJQUFBQSxHQUFHLEVBQUhBLEdBRm1CO0FBR25CTyxJQUFBQSxLQUFLLEVBQUUsSUFIWTtBQUluQjtBQUNBO0FBQ0E7QUFDQUMsSUFBQUEsUUFBUSxFQUFFUCxPQUFPLENBQUNRLFFBQVIsS0FBcUI7QUFQWixHQUFyQjs7QUFVQSxNQUFJZixTQUFTLENBQUNnQixLQUFkLEVBQXFCO0FBQ25CO0FBQ0FDLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUix5Q0FBNkNoQixpQkFBaUIsQ0FBQ2lCLElBQWxCLENBQXVCLEdBQXZCLENBQTdDO0FBQ0Q7O0FBRUQsU0FBTywwQkFBTWpCLGlCQUFpQixDQUFDaUIsSUFBbEIsQ0FBdUIsR0FBdkIsQ0FBTixFQUFtQyxFQUFuQyxFQUF1Q1QsWUFBdkMsQ0FBUDtBQUNELENBN0JNIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB7Q2hpbGRQcm9jZXNzLCBzcGF3bn0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgUHJvamVjdFdvcmtzcGFjZSBmcm9tICcuL3Byb2plY3Rfd29ya3NwYWNlJztcblxuLyoqXG4gKiBTcGF3bnMgYW5kIHJldHVybnMgYSBKZXN0IHByb2Nlc3Mgd2l0aCBzcGVjaWZpYyBhcmdzXG4gKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gYXJnc1xuICogQHJldHVybnMge0NoaWxkUHJvY2Vzc31cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnRcbmV4cG9ydCBjb25zdCBjcmVhdGVQcm9jZXNzID0gKHdvcmtzcGFjZTogUHJvamVjdFdvcmtzcGFjZSwgYXJnczogQXJyYXk8c3RyaW5nPik6IENoaWxkUHJvY2VzcyA9PiB7XG4gIGNvbnN0IHJ1bnRpbWVFeGVjdXRhYmxlID0gW3dvcmtzcGFjZS5qZXN0Q29tbWFuZExpbmUsIC4uLmFyZ3NdO1xuXG4gIC8vIElmIGEgcGF0aCB0byBjb25maWd1cmF0aW9uIGZpbGUgd2FzIGRlZmluZWQsIHB1c2ggaXQgdG8gcnVudGltZUFyZ3NcbiAgaWYgKHdvcmtzcGFjZS5wYXRoVG9Db25maWcpIHtcbiAgICBydW50aW1lRXhlY3V0YWJsZS5wdXNoKCctLWNvbmZpZycpO1xuICAgIHJ1bnRpbWVFeGVjdXRhYmxlLnB1c2god29ya3NwYWNlLnBhdGhUb0NvbmZpZyk7XG4gIH1cblxuICAvLyBUbyB1c2Ugb3VyIG93biBjb21tYW5kcyBpbiBjcmVhdGUtcmVhY3QsIHdlIG5lZWQgdG8gdGVsbCB0aGUgY29tbWFuZCB0aGF0XG4gIC8vIHdlJ3JlIGluIGEgQ0kgZW52aXJvbm1lbnQsIG9yIGl0IHdpbGwgYWx3YXlzIGFwcGVuZCAtLXdhdGNoXG4gIGNvbnN0IGVudiA9IHsuLi5wcm9jZXNzLmVudiwgLi4uKHdvcmtzcGFjZS5ub2RlRW52ID8/IHt9KSwgQ0k6ICd0cnVlJ307XG5cbiAgY29uc3Qgc3Bhd25PcHRpb25zID0ge1xuICAgIGN3ZDogd29ya3NwYWNlLnJvb3RQYXRoLFxuICAgIGVudixcbiAgICBzaGVsbDogdHJ1ZSxcbiAgICAvLyBmb3Igbm9uLXdpbmRvd3M6IHJ1biBpbiBkZXRhY2hlZCBtb2RlIHNvIHRoZSBwcm9jZXNzIHdpbGwgYmUgdGhlIGdyb3VwIGxlYWRlciBhbmQgYW55IHN1YnNlcXVlbnQgcHJvY2VzcyBzcGF3bmVkXG4gICAgLy8gd2l0aGluIGNhbiBiZSBsYXRlciBraWxsZWQgYXMgYSBncm91cCB0byBwcmV2ZW50IG9ycGhhbiBwcm9jZXNzZXMuXG4gICAgLy8gc2VlIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvY2hpbGRfcHJvY2Vzcy5odG1sI2NoaWxkX3Byb2Nlc3Nfb3B0aW9uc19kZXRhY2hlZFxuICAgIGRldGFjaGVkOiBwcm9jZXNzLnBsYXRmb3JtICE9PSAnd2luMzInLFxuICB9O1xuXG4gIGlmICh3b3Jrc3BhY2UuZGVidWcpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKGBzcGF3bmluZyBwcm9jZXNzIHdpdGggY29tbWFuZD0ke3J1bnRpbWVFeGVjdXRhYmxlLmpvaW4oJyAnKX1gKTtcbiAgfVxuXG4gIHJldHVybiBzcGF3bihydW50aW1lRXhlY3V0YWJsZS5qb2luKCcgJyksIFtdLCBzcGF3bk9wdGlvbnMpO1xufTtcbiJdfQ==