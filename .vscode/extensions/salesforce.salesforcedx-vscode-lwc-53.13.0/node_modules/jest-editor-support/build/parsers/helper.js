"use strict";

require("core-js/modules/es.array.concat");

require("core-js/modules/es.regexp.exec");

require("core-js/modules/es.string.match");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseOptions = exports.plugins = exports.supportedFileType = void 0;

/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

/**
 * determine if the file is a typescript (ts), javascript (js) otherwise returns undefined.
 * @param filepath
 * @returns 'js'|'ts' or undefined
 */
var supportedFileType = function supportedFileType(filePath) {
  if (filePath.match(/\.tsx?$/)) {
    return 'ts';
  }

  if (filePath.match(/\.m?jsx?$/)) {
    return 'js';
  }

  return undefined;
};

exports.supportedFileType = supportedFileType;
var plugins = ['asyncGenerators', 'bigInt', 'classPrivateMethods', 'classPrivateProperties', 'classProperties', 'doExpressions', 'dynamicImport', 'estree', 'exportDefaultFrom', 'exportNamespaceFrom', // deprecated
'functionBind', 'functionSent', 'importMeta', 'jsx', 'logicalAssignment', 'nullishCoalescingOperator', 'numericSeparator', 'objectRestSpread', 'optionalCatchBinding', 'optionalChaining', 'partialApplication', 'throwExpressions', 'topLevelAwait', ['decorators', {
  decoratorsBeforeExport: true
}], ['pipelineOperator', {
  proposal: 'smart'
}]];
exports.plugins = plugins;

var parseOptions = function parseOptions(filePath) {
  var strictMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var fileType = supportedFileType(filePath);

  if (fileType === 'ts') {
    return {
      plugins: [].concat(plugins, ['typescript'])
    };
  }

  var jsOptions = {
    plugins: [].concat(plugins, ['flow'])
  };

  if (fileType === 'js') {
    return jsOptions;
  } // unexpected file extension, for backward compatibility, will use js parser


  if (strictMode) {
    throw new TypeError("unable to find parser options for unrecognized file extension: ".concat(filePath));
  }

  return jsOptions;
};

exports.parseOptions = parseOptions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZXJzL2hlbHBlci50cyJdLCJuYW1lcyI6WyJzdXBwb3J0ZWRGaWxlVHlwZSIsImZpbGVQYXRoIiwibWF0Y2giLCJ1bmRlZmluZWQiLCJwbHVnaW5zIiwiZGVjb3JhdG9yc0JlZm9yZUV4cG9ydCIsInByb3Bvc2FsIiwicGFyc2VPcHRpb25zIiwic3RyaWN0TW9kZSIsImZpbGVUeXBlIiwianNPcHRpb25zIiwiVHlwZUVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0FBVUE7Ozs7O0FBS08sSUFBTUEsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixDQUFDQyxRQUFELEVBQStDO0FBQzlFLE1BQUlBLFFBQVEsQ0FBQ0MsS0FBVCxDQUFlLFNBQWYsQ0FBSixFQUErQjtBQUM3QixXQUFPLElBQVA7QUFDRDs7QUFDRCxNQUFJRCxRQUFRLENBQUNDLEtBQVQsQ0FBZSxXQUFmLENBQUosRUFBaUM7QUFDL0IsV0FBTyxJQUFQO0FBQ0Q7O0FBQ0QsU0FBT0MsU0FBUDtBQUNELENBUk07OztBQVVBLElBQU1DLE9BQXVCLEdBQUcsQ0FDckMsaUJBRHFDLEVBRXJDLFFBRnFDLEVBR3JDLHFCQUhxQyxFQUlyQyx3QkFKcUMsRUFLckMsaUJBTHFDLEVBTXJDLGVBTnFDLEVBT3JDLGVBUHFDLEVBUXJDLFFBUnFDLEVBU3JDLG1CQVRxQyxFQVVyQyxxQkFWcUMsRUFVZDtBQUN2QixjQVhxQyxFQVlyQyxjQVpxQyxFQWFyQyxZQWJxQyxFQWNyQyxLQWRxQyxFQWVyQyxtQkFmcUMsRUFnQnJDLDJCQWhCcUMsRUFpQnJDLGtCQWpCcUMsRUFrQnJDLGtCQWxCcUMsRUFtQnJDLHNCQW5CcUMsRUFvQnJDLGtCQXBCcUMsRUFxQnJDLG9CQXJCcUMsRUFzQnJDLGtCQXRCcUMsRUF1QnJDLGVBdkJxQyxFQXdCckMsQ0FBQyxZQUFELEVBQWU7QUFBQ0MsRUFBQUEsc0JBQXNCLEVBQUU7QUFBekIsQ0FBZixDQXhCcUMsRUF5QnJDLENBQUMsa0JBQUQsRUFBcUI7QUFBQ0MsRUFBQUEsUUFBUSxFQUFFO0FBQVgsQ0FBckIsQ0F6QnFDLENBQWhDOzs7QUE0QkEsSUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBQ04sUUFBRCxFQUFnRTtBQUFBLE1BQTdDTyxVQUE2Qyx1RUFBaEMsS0FBZ0M7QUFDMUYsTUFBTUMsUUFBUSxHQUFHVCxpQkFBaUIsQ0FBQ0MsUUFBRCxDQUFsQzs7QUFDQSxNQUFJUSxRQUFRLEtBQUssSUFBakIsRUFBdUI7QUFDckIsV0FBTztBQUFDTCxNQUFBQSxPQUFPLFlBQU1BLE9BQU4sR0FBZSxZQUFmO0FBQVIsS0FBUDtBQUNEOztBQUNELE1BQU1NLFNBQXdCLEdBQUc7QUFBQ04sSUFBQUEsT0FBTyxZQUFNQSxPQUFOLEdBQWUsTUFBZjtBQUFSLEdBQWpDOztBQUNBLE1BQUlLLFFBQVEsS0FBSyxJQUFqQixFQUF1QjtBQUNyQixXQUFPQyxTQUFQO0FBQ0QsR0FSeUYsQ0FVMUY7OztBQUNBLE1BQUlGLFVBQUosRUFBZ0I7QUFDZCxVQUFNLElBQUlHLFNBQUosMEVBQWdGVixRQUFoRixFQUFOO0FBQ0Q7O0FBRUQsU0FBT1MsU0FBUDtBQUNELENBaEJNIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cblxuaW1wb3J0IHtQYXJzZXJPcHRpb25zLCBQYXJzZXJQbHVnaW59IGZyb20gJ0BiYWJlbC9wYXJzZXInO1xuXG4vKipcbiAqIGRldGVybWluZSBpZiB0aGUgZmlsZSBpcyBhIHR5cGVzY3JpcHQgKHRzKSwgamF2YXNjcmlwdCAoanMpIG90aGVyd2lzZSByZXR1cm5zIHVuZGVmaW5lZC5cbiAqIEBwYXJhbSBmaWxlcGF0aFxuICogQHJldHVybnMgJ2pzJ3wndHMnIG9yIHVuZGVmaW5lZFxuICovXG5leHBvcnQgY29uc3Qgc3VwcG9ydGVkRmlsZVR5cGUgPSAoZmlsZVBhdGg6IHN0cmluZyk6ICd0cycgfCAnanMnIHwgdW5kZWZpbmVkID0+IHtcbiAgaWYgKGZpbGVQYXRoLm1hdGNoKC9cXC50c3g/JC8pKSB7XG4gICAgcmV0dXJuICd0cyc7XG4gIH1cbiAgaWYgKGZpbGVQYXRoLm1hdGNoKC9cXC5tP2pzeD8kLykpIHtcbiAgICByZXR1cm4gJ2pzJztcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGNvbnN0IHBsdWdpbnM6IFBhcnNlclBsdWdpbltdID0gW1xuICAnYXN5bmNHZW5lcmF0b3JzJyxcbiAgJ2JpZ0ludCcsXG4gICdjbGFzc1ByaXZhdGVNZXRob2RzJyxcbiAgJ2NsYXNzUHJpdmF0ZVByb3BlcnRpZXMnLFxuICAnY2xhc3NQcm9wZXJ0aWVzJyxcbiAgJ2RvRXhwcmVzc2lvbnMnLFxuICAnZHluYW1pY0ltcG9ydCcsXG4gICdlc3RyZWUnLFxuICAnZXhwb3J0RGVmYXVsdEZyb20nLFxuICAnZXhwb3J0TmFtZXNwYWNlRnJvbScsIC8vIGRlcHJlY2F0ZWRcbiAgJ2Z1bmN0aW9uQmluZCcsXG4gICdmdW5jdGlvblNlbnQnLFxuICAnaW1wb3J0TWV0YScsXG4gICdqc3gnLFxuICAnbG9naWNhbEFzc2lnbm1lbnQnLFxuICAnbnVsbGlzaENvYWxlc2NpbmdPcGVyYXRvcicsXG4gICdudW1lcmljU2VwYXJhdG9yJyxcbiAgJ29iamVjdFJlc3RTcHJlYWQnLFxuICAnb3B0aW9uYWxDYXRjaEJpbmRpbmcnLFxuICAnb3B0aW9uYWxDaGFpbmluZycsXG4gICdwYXJ0aWFsQXBwbGljYXRpb24nLFxuICAndGhyb3dFeHByZXNzaW9ucycsXG4gICd0b3BMZXZlbEF3YWl0JyxcbiAgWydkZWNvcmF0b3JzJywge2RlY29yYXRvcnNCZWZvcmVFeHBvcnQ6IHRydWV9XSxcbiAgWydwaXBlbGluZU9wZXJhdG9yJywge3Byb3Bvc2FsOiAnc21hcnQnfV0sXG5dO1xuXG5leHBvcnQgY29uc3QgcGFyc2VPcHRpb25zID0gKGZpbGVQYXRoOiBzdHJpbmcsIHN0cmljdE1vZGUgPSBmYWxzZSk6IFBhcnNlck9wdGlvbnMgfCBudWxsID0+IHtcbiAgY29uc3QgZmlsZVR5cGUgPSBzdXBwb3J0ZWRGaWxlVHlwZShmaWxlUGF0aCk7XG4gIGlmIChmaWxlVHlwZSA9PT0gJ3RzJykge1xuICAgIHJldHVybiB7cGx1Z2luczogWy4uLnBsdWdpbnMsICd0eXBlc2NyaXB0J119O1xuICB9XG4gIGNvbnN0IGpzT3B0aW9uczogUGFyc2VyT3B0aW9ucyA9IHtwbHVnaW5zOiBbLi4ucGx1Z2lucywgJ2Zsb3cnXX07XG4gIGlmIChmaWxlVHlwZSA9PT0gJ2pzJykge1xuICAgIHJldHVybiBqc09wdGlvbnM7XG4gIH1cblxuICAvLyB1bmV4cGVjdGVkIGZpbGUgZXh0ZW5zaW9uLCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgd2lsbCB1c2UganMgcGFyc2VyXG4gIGlmIChzdHJpY3RNb2RlKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgdW5hYmxlIHRvIGZpbmQgcGFyc2VyIG9wdGlvbnMgZm9yIHVucmVjb2duaXplZCBmaWxlIGV4dGVuc2lvbjogJHtmaWxlUGF0aH1gKTtcbiAgfVxuXG4gIHJldHVybiBqc09wdGlvbnM7XG59O1xuIl19