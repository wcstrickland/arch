import { IConnection, TextDocuments, TextDocument, TextDocumentChangeEvent, Location, WorkspaceFolder, InitializeResult, InitializeParams, TextDocumentPositionParams } from 'vscode-languageserver';
import { LanguageService, CompletionList, Hover, CompletionItem } from 'vscode-html-languageservice';
import { AuraDataProvider } from './aura-data-provider';
import { LWCDataProvider } from './lwc-data-provider';
import { WorkspaceContext } from '@salesforce/lightning-lsp-common';
import ComponentIndexer from './component-indexer';
import TypingIndexer from './typing-indexer';
export declare const propertyRegex: RegExp;
export declare const iteratorRegex: RegExp;
export declare enum Token {
    Tag = "tag",
    AttributeKey = "attributeKey",
    AttributeValue = "attributeValue",
    DynamicAttributeValue = "dynamicAttributeValue",
    Content = "content",
    DynamicContent = "dynamicContent"
}
declare type CursorInfo = {
    name: string;
    type: Token;
    tag?: string;
    range?: any;
};
export declare function findDynamicContent(text: string, offset: number): any;
export default class Server {
    readonly connection: IConnection;
    readonly documents: TextDocuments;
    context: WorkspaceContext;
    workspaceFolders: WorkspaceFolder[];
    workspaceRoots: string[];
    componentIndexer: ComponentIndexer;
    typingIndexer: TypingIndexer;
    languageService: LanguageService;
    auraDataProvider: AuraDataProvider;
    lwcDataProvider: LWCDataProvider;
    constructor();
    onInitialize(params: InitializeParams): Promise<InitializeResult>;
    get capabilities(): InitializeResult;
    onCompletion(params: TextDocumentPositionParams): Promise<CompletionList>;
    onCompletionResolve(item: CompletionItem): CompletionItem;
    onHover(params: TextDocumentPositionParams): Promise<Hover>;
    onDidChangeContent(changeEvent: any): Promise<void>;
    onDidSave(change: TextDocumentChangeEvent): Promise<void>;
    onShutdown(): void;
    onExit(): void;
    onDefinition(params: TextDocumentPositionParams): Location[];
    cursorInfo({ textDocument: { uri }, position }: TextDocumentPositionParams, document?: TextDocument): CursorInfo | null;
    listen(): void;
}
export {};
//# sourceMappingURL=lwc-server.d.ts.map