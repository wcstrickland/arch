"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const glob = __importStar(require("fast-glob"));
const normalize_path_1 = __importDefault(require("normalize-path"));
const path = __importStar(require("path"));
const fsExtra = __importStar(require("fs-extra"));
const typing_1 = __importDefault(require("./typing"));
const base_indexer_1 = __importDefault(require("./base-indexer"));
const shared_1 = require("@salesforce/lightning-lsp-common/lib/shared");
const basenameRegex = new RegExp(/(?<name>[\w-_]+)\.[^\/]+$/);
function pathBasename(filename) {
    const parsedPath = path.parse(filename).base;
    return basenameRegex.exec(parsedPath).groups.name;
}
exports.pathBasename = pathBasename;
class TypingIndexer extends base_indexer_1.default {
    constructor(attributes) {
        super(attributes);
        this.projectType = shared_1.detectWorkspaceHelper(attributes.workspaceRoot);
        switch (this.projectType) {
            case shared_1.WorkspaceType.SFDX:
                this.typingsBaseDir = path.join(this.workspaceRoot, '.sfdx', 'typings', 'lwc');
                break;
            case shared_1.WorkspaceType.CORE_PARTIAL:
                this.typingsBaseDir = path.join(this.workspaceRoot, '..', '.vscode', 'typings', 'lwc');
                break;
            case shared_1.WorkspaceType.CORE_ALL:
                this.typingsBaseDir = path.join(this.workspaceRoot, '.vscode', 'typings', 'lwc');
                break;
        }
    }
    static diff(items, compareItems) {
        compareItems = compareItems.map(pathBasename);
        return items.filter(item => {
            const filename = pathBasename(item);
            return !compareItems.includes(filename);
        });
    }
    init() {
        if (this.projectType === shared_1.WorkspaceType.SFDX) {
            this.createNewMetaTypings();
            this.deleteStaleMetaTypings();
            this.saveCustomLabelTypings();
        }
    }
    createNewMetaTypings() {
        fsExtra.ensureDirSync(this.typingsBaseDir);
        const newFiles = TypingIndexer.diff(this.metaFiles, this.metaTypings);
        newFiles.forEach(async (filename) => {
            const typing = typing_1.default.fromMeta(filename);
            const filePath = path.join(this.typingsBaseDir, typing.fileName);
            fsExtra.writeFileSync(filePath, typing.declaration);
        });
    }
    deleteStaleMetaTypings() {
        const staleTypings = TypingIndexer.diff(this.metaTypings, this.metaFiles);
        staleTypings.forEach((filename) => fsExtra.removeSync(filename));
    }
    async saveCustomLabelTypings() {
        fsExtra.ensureDirSync(this.typingsBaseDir);
        const typings = this.customLabelFiles.map(filename => {
            const data = fsExtra.readFileSync(filename);
            return typing_1.default.declarationsFromCustomLabels(data);
        });
        const typingContent = await Promise.all(typings);
        const fileContent = typingContent.join('\n');
        if (fileContent.length !== 0) {
            fsExtra.writeFileSync(this.customLabelTypings, fileContent);
        }
    }
    get metaFiles() {
        const globPath = normalize_path_1.default(`${this.workspaceRoot}/${this.sfdxPackageDirsPattern}/**/+(staticresources|contentassets|messageChannels)/*.+(resource|asset|messageChannel)-meta.xml`);
        return glob.sync(globPath).map(file => path.resolve(file));
    }
    get metaTypings() {
        const globPath = normalize_path_1.default(`${this.typingsBaseDir}/*.+(messageChannel|resource|asset).d.ts`);
        return glob.sync(globPath).map(file => path.resolve(file));
    }
    get customLabelFiles() {
        const globPath = normalize_path_1.default(`${this.sfdxPackageDirsPattern}/**/labels/CustomLabels.labels-meta.xml`);
        const result = glob.sync(globPath, { cwd: normalize_path_1.default(this.workspaceRoot) }).map(file => path.join(this.workspaceRoot, file));
        return result;
    }
    get customLabelTypings() {
        return path.join(this.typingsBaseDir, 'customlabels.d.ts');
    }
}
exports.default = TypingIndexer;
//# sourceMappingURL=typing-indexer.js.map