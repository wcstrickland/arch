"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("@lwc/errors");
const template_compiler_1 = __importDefault(require("@lwc/template-compiler"));
const vscode_languageserver_1 = require("vscode-languageserver");
const constants_1 = require("../constants");
const LEVEL_MAPPING = new Map([
    [errors_1.DiagnosticLevel.Log, vscode_languageserver_1.DiagnosticSeverity.Information],
    [errors_1.DiagnosticLevel.Warning, vscode_languageserver_1.DiagnosticSeverity.Warning],
    [errors_1.DiagnosticLevel.Error, vscode_languageserver_1.DiagnosticSeverity.Error],
    [errors_1.DiagnosticLevel.Fatal, vscode_languageserver_1.DiagnosticSeverity.Error],
]);
const TYPOS = ['<lighting-', '<lightening-', '<lihgtning-'];
function toRange(textDocument, start, length) {
    return vscode_languageserver_1.Range.create(textDocument.positionAt(start), textDocument.positionAt(start + length));
}
function lintTypos(document) {
    const source = document.getText();
    const lines = source.split(/\r?\n/g);
    const errors = [];
    lines.forEach((line, idx) => {
        TYPOS.forEach(typo => {
            const idxTypo = line.indexOf(typo);
            if (idxTypo > -1) {
                errors.push({
                    range: {
                        start: { line: idx, character: idxTypo },
                        end: { line: idx, character: idxTypo + typo.length },
                    },
                    message: `${typo} is not a valid namespace, sure you didn't mean "<lightning-"?`,
                    severity: LEVEL_MAPPING.get(errors_1.DiagnosticLevel.Error),
                    source: constants_1.DIAGNOSTIC_SOURCE,
                });
            }
        });
    });
    return errors;
}
function lintLwcMarkup(document) {
    const source = document.getText();
    const { warnings } = template_compiler_1.default(source, {});
    let warningsLwc = warnings.map(warning => {
        const { start = 0, length = 0 } = warning.location || { start: 0, length: 0 };
        return {
            range: toRange(document, start, length),
            message: warning.message,
            severity: LEVEL_MAPPING.get(warning.level),
            source: constants_1.DIAGNOSTIC_SOURCE,
        };
    });
    const warningsTypos = lintTypos(document);
    warningsLwc = warningsLwc.concat(warningsTypos);
    return warningsLwc;
}
exports.default = lintLwcMarkup;
//# sourceMappingURL=linter.js.map