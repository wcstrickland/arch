"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const xml2js = __importStar(require("xml2js"));
const path = __importStar(require("path"));
const metaRegex = new RegExp(/(?<name>[\w-\.]+)\.(?<type>\w.+)-meta$/);
function declaration(type, name) {
    let modulePath;
    switch (type) {
        case 'asset':
            modulePath = `@salesforce/contentAssetUrl/${name}`;
            break;
        case 'resource':
            modulePath = `@salesforce/resourceUrl/${name}`;
            break;
        case 'messageChannel':
            modulePath = `@salesforce/messageChannel/${name}__c`;
            break;
        case 'customLabel':
            modulePath = `@salesforce/label/c.${name}`;
            break;
        default:
            throw new Error(`${type} not supported`);
    }
    return `declare module "${modulePath}" {
    var ${name}: string;
    export default ${name};
}`;
}
class Typing {
    constructor(attributes) {
        if (!Typing.allowedTypes.includes(attributes.type)) {
            const errorMessage = 'Cannot create a Typing with "' + attributes.type + '" type. Must be one of [' + Typing.allowedTypes.toString() + ']';
            throw new Error(errorMessage);
        }
        this.type = attributes.type;
        this.name = attributes.name;
        this.fileName = `${attributes.name}.${attributes.type}.d.ts`;
    }
    static fromMeta(metaFilename) {
        const parsedPath = path.parse(metaFilename);
        const { name, type } = metaRegex.exec(parsedPath.name).groups;
        return new Typing({ name, type });
    }
    static async declarationsFromCustomLabels(xmlDocument) {
        const doc = await new xml2js.Parser().parseStringPromise(xmlDocument);
        if (doc.CustomLabels === undefined || doc.CustomLabels.labels === undefined) {
            return '';
        }
        const declarations = doc.CustomLabels.labels.map((label) => {
            return declaration('customLabel', label.fullName[0]);
        });
        return declarations.join('\n');
    }
    get declaration() {
        return declaration(this.type, this.name);
    }
}
exports.default = Typing;
Typing.allowedTypes = ['asset', 'resource', 'messageChannel', 'customLabel'];
//# sourceMappingURL=typing.js.map