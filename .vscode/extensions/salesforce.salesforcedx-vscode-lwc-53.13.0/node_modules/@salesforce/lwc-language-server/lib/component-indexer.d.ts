import Tag from './tag';
import { Entry } from 'fast-glob';
import BaseIndexer from './base-indexer';
declare type ComponentIndexerAttributes = {
    workspaceRoot: string;
};
export declare enum DelimiterType {
    Aura = ":",
    LWC = "-"
}
export declare function tagEqualsFile(tag: Tag, entry: Entry): boolean;
export declare function unIndexedFiles(entries: Entry[], tags: Tag[]): Entry[];
export declare function ensureDirectoryExists(filePath: string): void;
export default class ComponentIndexer extends BaseIndexer {
    readonly workspaceType: number;
    readonly tags: Map<string, Tag>;
    constructor(attributes: ComponentIndexerAttributes);
    get componentEntries(): Entry[];
    get customData(): Tag[];
    findTagByName(query: string): Tag | null;
    findTagByURI(uri: string): Tag | null;
    loadTagsFromIndex(): void;
    persistCustomComponents(): void;
    get unIndexedFiles(): Entry[];
    get staleTags(): Tag[];
    init(): Promise<void>;
    reindex(): Promise<void>;
}
export {};
//# sourceMappingURL=component-indexer.d.ts.map