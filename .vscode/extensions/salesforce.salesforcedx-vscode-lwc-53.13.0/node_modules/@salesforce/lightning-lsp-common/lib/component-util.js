"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const decamelize_1 = __importDefault(require("decamelize"));
// TODO investigate more why this happens
function splitPath(filePath) {
    let pathElements = filePath.dir.split(path.sep);
    // Somehow on windows paths are occassionally using forward slash
    if (path.sep === '\\' && filePath.dir.indexOf('\\') === -1) {
        pathElements = filePath.dir.split('/');
    }
    return pathElements;
}
function nameFromFile(file, sfdxProject, converter) {
    const filePath = path.parse(file);
    const fileName = filePath.name;
    const pathElements = splitPath(filePath);
    const parentDirName = pathElements.pop();
    if (fileName === parentDirName) {
        const namespace = sfdxProject ? 'c' : pathElements.pop();
        return converter(namespace, parentDirName);
    }
    return null;
}
function nameFromDirectory(file, sfdxProject, converter) {
    const filePath = path.parse(file);
    if (sfdxProject) {
        return converter('c', filePath.name);
    }
    else {
        // TODO verify
        return converter(splitPath(filePath).pop(), filePath.name);
    }
}
function tagName(namespace, tag) {
    if (namespace === 'interop') {
        // treat interop as lightning, i.e. needed when using extension with lightning-global
        // TODO: worth to add WorkspaceType.LIGHTNING_GLOBAL?
        namespace = 'lightning';
    }
    // convert camel-case to hyphen-case/kebab-case
    return namespace + '-' + decamelize_1.default(tag, '-');
}
function moduleName(namespace, tag) {
    if (namespace === 'interop') {
        // treat interop as lightning, i.e. needed when using extension with lightning-global
        // TODO: worth to add WorkspaceType.LIGHTNING_GLOBAL?
        namespace = 'lightning';
    }
    // convert camel-case to hyphen-case/kebab-case
    return namespace + '/' + tag;
    // TODO confirm we shouldn't be doing this anymore
    // + decamelize(tag, '-');
}
function componentName(namespace, tag) {
    return namespace + ':' + tag;
}
/**
 * @param file path to main .js/.html for component, i.e. card/card.js or card/card.html
 * @return tag name, i.e. c-card or namespace-card, or null if not the .js/.html file for a component
 */
function tagFromFile(file, sfdxProject) {
    return nameFromFile(file, sfdxProject, tagName);
}
exports.tagFromFile = tagFromFile;
function tagFromDirectory(file, sfdxProject) {
    return nameFromDirectory(file, sfdxProject, tagName);
}
exports.tagFromDirectory = tagFromDirectory;
/**
 * @param file path to main .js/.html for component, i.e. card/card.js or card/card.html
 * @return module name, i.e. c/card or namespace/card, or null if not the .js/.html file for a component
 */
function moduleFromFile(file, sfdxProject) {
    return nameFromFile(file, sfdxProject, moduleName);
}
exports.moduleFromFile = moduleFromFile;
function moduleFromDirectory(file, sfdxProject) {
    return nameFromDirectory(file, sfdxProject, moduleName);
}
exports.moduleFromDirectory = moduleFromDirectory;
function componentFromFile(file, sfdxProject) {
    return nameFromFile(file, sfdxProject, componentName);
}
exports.componentFromFile = componentFromFile;
function componentFromDirectory(file, sfdxProject) {
    return nameFromDirectory(file, sfdxProject, componentName);
}
exports.componentFromDirectory = componentFromDirectory;
/**
 * @return true if file is the main .js file for a component
 */
function isJSComponent(file) {
    if (!file.toLowerCase().endsWith('.js')) {
        return false;
    }
    return tagFromFile(file, true) !== null;
}
exports.isJSComponent = isJSComponent;
//# sourceMappingURL=component-util.js.map