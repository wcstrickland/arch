'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const htmlScanner_1 = require("../parser/htmlScanner");
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const tagProviders_1 = require("./tagProviders");
const htmlLanguageTypes_1 = require("../htmlLanguageTypes");
const TOP_OF_FILE = vscode_languageserver_types_1.Range.create(vscode_languageserver_types_1.Position.create(0, 0), vscode_languageserver_types_1.Position.create(0, 0));
function findDefinition(document, position, htmlDocument) {
    const offset = document.offsetAt(position);
    const node = htmlDocument.findNodeAt(offset);
    if (!node || !node.tag) {
        return null;
    }
    const tagProviders = tagProviders_1.getTagProviders().filter(p => p.isApplicable(document.languageId));
    function getTagLocation(tag) {
        for (const provider of tagProviders) {
            const info = provider.getTagInfo(tag);
            if (info && info.location) {
                return info.location;
            }
        }
        return null;
    }
    function getAttributeLocation(tag, attribute) {
        for (const provider of tagProviders) {
            const tagInfo = provider.getTagInfo(tag);
            if (tagInfo) {
                const attrInfo = tagInfo.getAttributeInfo(attribute);
                if (attrInfo && attrInfo.location) {
                    return attrInfo.location;
                }
            }
        }
        return null;
    }
    function getTagNameRange(tokenType, startOffset) {
        const scanner = htmlScanner_1.createScanner(document.getText(), startOffset);
        let token = scanner.scan();
        while (token !== htmlLanguageTypes_1.TokenType.EOS && (scanner.getTokenEnd() < offset || (scanner.getTokenEnd() === offset && token !== tokenType))) {
            token = scanner.scan();
        }
        if (token === tokenType && offset <= scanner.getTokenEnd()) {
            return { start: document.positionAt(scanner.getTokenOffset()), end: document.positionAt(scanner.getTokenEnd()) };
        }
        return null;
    }
    if (node.endTagStart && offset >= node.endTagStart) {
        const endTagRange = getTagNameRange(htmlLanguageTypes_1.TokenType.EndTag, node.endTagStart);
        if (endTagRange) {
            return getTagLocation(node.tag);
        }
        return null;
    }
    const tagRange = getTagNameRange(htmlLanguageTypes_1.TokenType.StartTag, node.start);
    if (tagRange) {
        return getTagLocation(node.tag);
    }
    const attributeRange = getTagNameRange(htmlLanguageTypes_1.TokenType.AttributeName, node.start);
    if (attributeRange) {
        return getAttributeLocation(node.tag, document.getText(attributeRange));
    }
    return null;
}
exports.findDefinition = findDefinition;
//# sourceMappingURL=htmlDefinition.js.map