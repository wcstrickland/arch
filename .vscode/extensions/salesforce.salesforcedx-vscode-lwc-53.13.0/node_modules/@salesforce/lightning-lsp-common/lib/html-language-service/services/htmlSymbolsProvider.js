/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
function findDocumentSymbols(document, htmlDocument) {
    let symbols = [];
    htmlDocument.roots.forEach(node => {
        provideFileSymbolsInternal(document, node, '', symbols);
    });
    return symbols;
}
exports.findDocumentSymbols = findDocumentSymbols;
function provideFileSymbolsInternal(document, node, container, symbols) {
    let name = nodeToName(node);
    let location = vscode_languageserver_types_1.Location.create(document.uri, vscode_languageserver_types_1.Range.create(document.positionAt(node.start), document.positionAt(node.end)));
    let symbol = {
        name: name,
        location: location,
        containerName: container,
        kind: vscode_languageserver_types_1.SymbolKind.Field,
    };
    symbols.push(symbol);
    node.children.forEach(child => {
        provideFileSymbolsInternal(document, child, name, symbols);
    });
}
function nodeToName(node) {
    let name = node.tag;
    if (node.attributes) {
        let id = node.attributes['id'];
        let classes = node.attributes['class'];
        if (id) {
            name += `#${id.replace(/[\"\']/g, '')}`;
        }
        if (classes) {
            name += classes
                .replace(/[\"\']/g, '')
                .split(/\s+/)
                .map(className => `.${className}`)
                .join('');
        }
    }
    return name || '?';
}
//# sourceMappingURL=htmlSymbolsProvider.js.map