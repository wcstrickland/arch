"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const htmlScanner_1 = require("../parser/htmlScanner");
const htmlLanguageTypes_1 = require("../htmlLanguageTypes");
function stripQuotes(str) {
    if (!str)
        return str;
    if (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"') {
        return str.substr(1, str.length - 2);
    }
    if (str.charAt(0) === "'" && str.charAt(str.length - 1) === "'") {
        return str.substr(1, str.length - 2);
    }
    return str;
}
exports.stripQuotes = stripQuotes;
function hasQuotes(str) {
    return (str.charAt(0) === '"' && str.charAt(str.length - 1) === '"') || (str.charAt(0) === "'" && str.charAt(str.length - 1) === "'");
}
exports.hasQuotes = hasQuotes;
function getTagNameRange(document, offset, tokenType, startOffset) {
    const scanner = htmlScanner_1.createScanner(document.getText(), startOffset);
    let token = scanner.scan();
    while (token !== htmlLanguageTypes_1.TokenType.EOS && (scanner.getTokenEnd() < offset || (scanner.getTokenEnd() === offset && token !== tokenType))) {
        token = scanner.scan();
    }
    if (token === tokenType && offset <= scanner.getTokenEnd()) {
        return { start: document.positionAt(scanner.getTokenOffset()), end: document.positionAt(scanner.getTokenEnd()) };
    }
    return null;
}
exports.getTagNameRange = getTagNameRange;
function getAttributeRange(document, attributeName, startOffset, endOffset) {
    const scanner = htmlScanner_1.createScanner(document.getText(), startOffset);
    let token = scanner.scan();
    while (token !== htmlLanguageTypes_1.TokenType.EOS && scanner.getTokenEnd() < endOffset) {
        if (token === htmlLanguageTypes_1.TokenType.AttributeName) {
            const curAttributeName = document.getText({
                start: document.positionAt(scanner.getTokenOffset()),
                end: document.positionAt(scanner.getTokenEnd()),
            });
            if (curAttributeName === attributeName) {
                let token = scanner.scan();
                while (token !== htmlLanguageTypes_1.TokenType.EOS) {
                    if (token === htmlLanguageTypes_1.TokenType.AttributeValue) {
                        const range = { start: document.positionAt(scanner.getTokenOffset()), end: document.positionAt(scanner.getTokenEnd()) };
                        const value = document.getText(range);
                        if (hasQuotes(value)) {
                            range.start.character = range.start.character + 1;
                            range.end.character = range.end.character - 1;
                        }
                        return range;
                    }
                    token = scanner.scan();
                }
            }
        }
        token = scanner.scan();
        if (token === htmlLanguageTypes_1.TokenType.StartTagClose || token == htmlLanguageTypes_1.TokenType.StartTagSelfClose) {
            break;
        }
    }
    return null;
}
exports.getAttributeRange = getAttributeRange;
//# sourceMappingURL=utils.js.map