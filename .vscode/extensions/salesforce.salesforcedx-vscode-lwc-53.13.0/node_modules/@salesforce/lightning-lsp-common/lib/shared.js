"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// utility methods shared with the vscode extension
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const SFDX_PROJECT = 'sfdx-project.json';
var WorkspaceType;
(function (WorkspaceType) {
    /** standard workspace with a package.json but no lwc dependencies */
    WorkspaceType[WorkspaceType["STANDARD"] = 0] = "STANDARD";
    /** standard workspace with a package.json and lwc dependencies */
    WorkspaceType[WorkspaceType["STANDARD_LWC"] = 1] = "STANDARD_LWC";
    /** monorepo workspace, using monorepo strucutre */
    WorkspaceType[WorkspaceType["MONOREPO"] = 2] = "MONOREPO";
    /** monorepo workspace, using monorepo strucutre, and lwc dependencies */
    WorkspaceType[WorkspaceType["MONOREPO_LWC"] = 3] = "MONOREPO_LWC";
    /** sfdx workspace */
    WorkspaceType[WorkspaceType["SFDX"] = 4] = "SFDX";
    /** workspace including all core projects */
    WorkspaceType[WorkspaceType["CORE_ALL"] = 5] = "CORE_ALL";
    /** workspace including only one or more core projects */
    WorkspaceType[WorkspaceType["CORE_PARTIAL"] = 6] = "CORE_PARTIAL";
    WorkspaceType[WorkspaceType["UNKNOWN"] = 7] = "UNKNOWN";
})(WorkspaceType = exports.WorkspaceType || (exports.WorkspaceType = {}));
function isUnknown(type) {
    // what about core all or core single?
    switch (type) {
        case WorkspaceType.STANDARD:
        case WorkspaceType.MONOREPO_LWC:
        case WorkspaceType.MONOREPO:
        case WorkspaceType.UNKNOWN:
            return true;
    }
    return false;
}
exports.isUnknown = isUnknown;
function isLWC(type) {
    return type === WorkspaceType.SFDX || type === WorkspaceType.STANDARD_LWC || type === WorkspaceType.CORE_ALL || type === WorkspaceType.CORE_PARTIAL;
}
exports.isLWC = isLWC;
function getSfdxProjectFile(root) {
    return path.join(root, SFDX_PROJECT);
}
exports.getSfdxProjectFile = getSfdxProjectFile;
/**
 * @param root
 * @returns WorkspaceType for singular root
 */
function detectWorkspaceHelper(root) {
    if (fs.existsSync(getSfdxProjectFile(root))) {
        return WorkspaceType.SFDX;
    }
    if (fs.existsSync(path.join(root, 'workspace-user.xml'))) {
        return WorkspaceType.CORE_ALL;
    }
    if (fs.existsSync(path.join(root, '..', 'workspace-user.xml'))) {
        return WorkspaceType.CORE_PARTIAL;
    }
    if (fs.existsSync(path.join(root, 'lwc.config.json'))) {
        return WorkspaceType.STANDARD_LWC;
    }
    const packageJson = path.join(root, 'package.json');
    if (fs.existsSync(packageJson)) {
        try {
            const packageInfo = JSON.parse(fs.readFileSync(packageJson, 'utf-8'));
            const dependencies = Object.keys(packageInfo.dependencies || {});
            const devDependencies = Object.keys(packageInfo.devDependencies || {});
            const allDependencies = [...dependencies, ...devDependencies];
            const hasLWCdependencies = allDependencies.some(key => {
                return key.startsWith('@lwc/') || key === 'lwc';
            });
            // any type of @lwc is a dependency
            if (hasLWCdependencies) {
                return WorkspaceType.STANDARD_LWC;
            }
            // has any type of lwc configuration
            if (packageInfo.lwc) {
                return WorkspaceType.STANDARD_LWC;
            }
            if (packageInfo.workspaces) {
                return WorkspaceType.MONOREPO;
            }
            if (fs.existsSync(path.join(root, 'lerna.json'))) {
                return WorkspaceType.MONOREPO;
            }
            return WorkspaceType.STANDARD;
        }
        catch (e) {
            // Log error and fallback to setting workspace type to Unknown
            console.error(`Error encountered while trying to detect workspace type ${e}`);
        }
    }
    console.error('unknown workspace type:', root);
    return WorkspaceType.UNKNOWN;
}
exports.detectWorkspaceHelper = detectWorkspaceHelper;
/**
 * @param workspaceRoots
 * @returns WorkspaceType, actively not supporting workspaces of mixed type
 */
function detectWorkspaceType(workspaceRoots) {
    if (workspaceRoots.length === 1) {
        return detectWorkspaceHelper(workspaceRoots[0]);
    }
    for (const root of workspaceRoots) {
        const type = detectWorkspaceHelper(root);
        if (type !== WorkspaceType.CORE_PARTIAL) {
            console.error('unknown workspace type');
            return WorkspaceType.UNKNOWN;
        }
    }
    return WorkspaceType.CORE_PARTIAL;
}
exports.detectWorkspaceType = detectWorkspaceType;
//# sourceMappingURL=shared.js.map