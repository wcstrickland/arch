"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const path = __importStar(require("path"));
const errors_1 = require("@lwc/errors");
const options_1 = require("../compiler/options");
const style_1 = __importDefault(require("./style"));
const template_1 = __importDefault(require("./template"));
const javascript_1 = __importDefault(require("./javascript"));
const utils_1 = require("../utils");
function transform(src, id, options) {
    errors_1.invariant(utils_1.isString(src), errors_1.TransformerErrors.INVALID_SOURCE, [src]);
    errors_1.invariant(utils_1.isString(id), errors_1.TransformerErrors.INVALID_ID, [id]);
    return transformFile(src, id, options_1.normalizeOptions(options));
}
exports.transform = transform;
function getTransformer(fileName) {
    switch (path.extname(fileName)) {
        case ".html":
            return template_1.default;
        case ".css":
            return style_1.default;
        case ".js":
            return javascript_1.default;
        default:
            throw errors_1.generateCompilerError(errors_1.TransformerErrors.NO_AVAILABLE_TRANSFORMER, {
                messageArgs: [fileName],
                origin: { filename: fileName }
            });
    }
}
exports.getTransformer = getTransformer;
async function transformFile(src, id, options, metadataCollector) {
    const transformer = getTransformer(id);
    return await transformer(src, id, options, metadataCollector);
}
exports.transformFile = transformFile;
//# sourceMappingURL=transformer.js.map