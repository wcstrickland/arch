"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SoqlQueryAnalyzer = void 0;
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const SoqlParser_1 = require("@salesforce/soql-common/lib/soql-parser/generated/SoqlParser");
const tree_1 = require("antlr4ts/tree");
class SoqlQueryAnalyzer {
    constructor(parsedQueryTree) {
        this.parsedQueryTree = parsedQueryTree;
        this.innerQueriesListener = new SoqlInnerQueriesListener();
        tree_1.ParseTreeWalker.DEFAULT.walk(this.innerQueriesListener, parsedQueryTree);
    }
    innermostQueryInfoAt(cursorTokenIndex) {
        const queries = this.queryInfosAt(cursorTokenIndex);
        return queries.length > 0 ? queries[0] : undefined;
    }
    queryInfosAt(cursorTokenIndex) {
        return this.innerQueriesListener.findQueriesAt(cursorTokenIndex);
    }
    extractWhereField(cursorTokenIndex) {
        var _a;
        const sobject = (_a = this.innermostQueryInfoAt(cursorTokenIndex)) === null || _a === void 0 ? void 0 : _a.sobjectName;
        if (sobject) {
            const whereFieldListener = new SoqlWhereFieldListener(cursorTokenIndex, sobject);
            tree_1.ParseTreeWalker.DEFAULT.walk(whereFieldListener, this.parsedQueryTree);
            return whereFieldListener.result;
        }
        else {
            return undefined;
        }
    }
}
exports.SoqlQueryAnalyzer = SoqlQueryAnalyzer;
/* eslint-disable @typescript-eslint/member-ordering */
class SoqlInnerQueriesListener {
    constructor() {
        this.innerSoqlQueries = new Map();
    }
    /**
     * Return the list of nested queries which cover the given token position
     *
     * @param atIndex token index
     * @returns the array of queryinfos ordered from the innermost to the outermost
     */
    findQueriesAt(atIndex) {
        const innerQueries = Array.from(this.innerSoqlQueries.values()).filter((query) => this.queryContainsTokenIndex(query, atIndex));
        const sortedQueries = innerQueries.sort((queryA, queryB) => queryB.select.tokenIndex - queryA.select.tokenIndex);
        return sortedQueries;
    }
    queryContainsTokenIndex(innerQuery, atTokenIndex) {
        var _a;
        // NOTE: We use the parent node to take into account the enclosing
        // parentheses (in the case of inner SELECTs), and the whole text until EOF
        // (for the top-level SELECT). BTW: soqlInnerQueryNode always has a parent.
        const queryNode = innerQuery.soqlInnerQueryNode.parent
            ? innerQuery.soqlInnerQueryNode.parent
            : innerQuery.soqlInnerQueryNode;
        const startIndex = queryNode.start.tokenIndex;
        const stopIndex = (_a = queryNode.stop) === null || _a === void 0 ? void 0 : _a.tokenIndex;
        return atTokenIndex > startIndex && !!stopIndex && atTokenIndex <= stopIndex;
    }
    findAncestorSoqlInnerQueryContext(node) {
        let soqlInnerQueryNode = node;
        while (soqlInnerQueryNode &&
            ![SoqlParser_1.SoqlParser.RULE_soqlInnerQuery, SoqlParser_1.SoqlParser.RULE_soqlSemiJoin].includes(soqlInnerQueryNode.ruleContext.ruleIndex)) {
            soqlInnerQueryNode = soqlInnerQueryNode.parent;
        }
        return soqlInnerQueryNode ? soqlInnerQueryNode : undefined;
    }
    innerQueryForContext(ctx) {
        const soqlInnerQueryNode = this.findAncestorSoqlInnerQueryContext(ctx);
        if (soqlInnerQueryNode) {
            const selectFromPair = this.innerSoqlQueries.get(soqlInnerQueryNode.start.tokenIndex);
            return selectFromPair;
        }
        return undefined;
    }
    enterSoqlInnerQuery(ctx) {
        this.innerSoqlQueries.set(ctx.start.tokenIndex, {
            select: ctx.start,
            soqlInnerQueryNode: ctx,
        });
    }
    enterSoqlSemiJoin(ctx) {
        this.innerSoqlQueries.set(ctx.start.tokenIndex, {
            select: ctx.start,
            isSemiJoin: true,
            soqlInnerQueryNode: ctx,
        });
    }
    exitSoqlFromExprs(ctx) {
        var _a;
        const selectFromPair = this.innerQueryForContext(ctx);
        if (ctx.children && ctx.children.length > 0 && selectFromPair) {
            const fromToken = (_a = ctx.parent) === null || _a === void 0 ? void 0 : _a.start;
            const sobjectName = ctx.getChild(0).getChild(0).text;
            selectFromPair.from = fromToken;
            selectFromPair.sobjectName = sobjectName;
        }
    }
    enterSoqlSelectColumnExpr(ctx) {
        if (ctx.soqlField().childCount === 1) {
            const soqlField = ctx.soqlField();
            const soqlIdentifiers = soqlField.soqlIdentifier();
            if (soqlIdentifiers.length === 1) {
                const selectFromPair = this.innerQueryForContext(ctx);
                if (selectFromPair) {
                    if (!selectFromPair.selectedFields) {
                        selectFromPair.selectedFields = [];
                    }
                    selectFromPair.selectedFields.push(soqlIdentifiers[0].text);
                }
            }
        }
    }
    enterSoqlGroupByExprs(ctx) {
        const groupByFields = [];
        ctx.soqlField().forEach((soqlField) => {
            const soqlIdentifiers = soqlField.soqlIdentifier();
            if (soqlIdentifiers.length === 1) {
                groupByFields.push(soqlIdentifiers[0].text);
            }
        });
        if (groupByFields.length > 0) {
            const selectFromPair = this.innerQueryForContext(ctx);
            if (selectFromPair) {
                selectFromPair.groupByFields = groupByFields;
            }
        }
    }
}
class SoqlWhereFieldListener {
    constructor(cursorTokenIndex, sobject) {
        this.cursorTokenIndex = cursorTokenIndex;
        this.sobject = sobject;
        this.resultDistance = Number.MAX_VALUE;
    }
    enterEveryRule(ctx) {
        if (ctx.ruleContext.ruleIndex === SoqlParser_1.SoqlParser.RULE_soqlWhereExpr) {
            if (ctx.start.tokenIndex <= this.cursorTokenIndex) {
                const distance = this.cursorTokenIndex - ctx.start.tokenIndex;
                if (distance < this.resultDistance) {
                    this.resultDistance = distance;
                    const soqlField = ctx.getChild(0).text;
                    // Handle basic "dot" expressions
                    // TODO: Support Aliases
                    const fieldComponents = soqlField.split('.', 2);
                    if (fieldComponents[0] === this.sobject) {
                        fieldComponents.shift();
                    }
                    const operator = ctx.childCount > 2 ? ctx.getChild(1).text : undefined;
                    this.result = {
                        sobjectName: this.sobject,
                        fieldName: fieldComponents.join('.'),
                        operator,
                    };
                }
            }
        }
    }
}
//# sourceMappingURL=soql-query-analysis.js.map