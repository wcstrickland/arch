"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const vscode_languageserver_1 = require("vscode-languageserver");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const validator_1 = require("./validator");
const query_validation_feature_1 = require("./query-validation-feature");
const completion_1 = require("./completion");
// Create a connection for the server, using Node's IPC as a transport.
const connection = vscode_languageserver_1.createConnection(vscode_languageserver_1.ProposedFeatures.all);
connection.sendNotification('soql/validate', 'createConnection');
let runQueryValidation;
// Create a simple text document manager.
const documents = new vscode_languageserver_1.TextDocuments(vscode_languageserver_textdocument_1.TextDocument);
connection.onInitialize((params) => {
    runQueryValidation = query_validation_feature_1.default.hasRunQueryValidation(params.capabilities);
    connection.console.log(`runQueryValidation: ${runQueryValidation}`);
    const result = {
        capabilities: {
            textDocumentSync: vscode_languageserver_1.TextDocumentSyncKind.Full,
            completionProvider: {
                // resolveProvider: true,
                triggerCharacters: [' '],
            },
        },
    };
    return result;
});
function clearDiagnostics(uri) {
    connection.sendDiagnostics({ uri, diagnostics: [] });
}
documents.onDidClose((change) => {
    clearDiagnostics(change.document.uri);
});
/**
 * NOTE: Listening on deleted files should NOT be necessary to trigger the clearing of Diagnostics,
 * since the `documents.onDidClose()` callback should take care of it. However, for some reason,
 * on automated tests of the SOQL VS Code extension, the 'workbench.action.close*Editor' commands
 * don't trigger the `onDidClose()` callback on the language server side.
 *
 * So, to be safe (and to make tests green) we explicitly clear diagnostics also on deleted files:
 */
connection.onDidChangeWatchedFiles((watchedFiles) => {
    const deletedUris = watchedFiles.changes
        .filter((change) => change.type === vscode_languageserver_1.FileChangeType.Deleted)
        .map((change) => change.uri);
    deletedUris.forEach(clearDiagnostics);
});
documents.onDidChangeContent(async (change) => {
    const diagnostics = validator_1.Validator.validateSoqlText(change.document);
    // clear syntax errors immediatly (don't wait on http call)
    connection.sendDiagnostics({ uri: change.document.uri, diagnostics });
    if (diagnostics.length === 0 && runQueryValidation) {
        const remoteDiagnostics = await validator_1.Validator.validateLimit0Query(change.document, connection);
        if (remoteDiagnostics.length > 0) {
            connection.sendDiagnostics({ uri: change.document.uri, diagnostics: remoteDiagnostics });
        }
    }
});
connection.onCompletion(
// eslint-disable-next-line @typescript-eslint/require-await
async (request) => {
    const doc = documents.get(request.textDocument.uri);
    if (!doc)
        return [];
    return completion_1.completionsFor(doc.getText(), request.position.line + 1, request.position.character + 1);
});
documents.listen(connection);
connection.listen();
//# sourceMappingURL=server.js.map