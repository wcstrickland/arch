"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
/* eslint-disable @typescript-eslint/no-empty-interface */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiteralType = exports.ConditionOperator = exports.AndOr = exports.NullsOrder = exports.Order = exports.SyntaxOptions = exports.UiOperatorValue = exports.SObjectFieldType = exports.ErrorType = void 0;
var ErrorType;
(function (ErrorType) {
    ErrorType["UNKNOWN"] = "UNKNOWN";
    ErrorType["EMPTY"] = "EMPTY";
    ErrorType["NOSELECT"] = "NOSELECT";
    ErrorType["NOSELECTIONS"] = "NOSELECTIONS";
    ErrorType["NOFROM"] = "NOFROM";
    ErrorType["INCOMPLETEFROM"] = "INCOMPLETEFROM";
    ErrorType["INCOMPLETELIMIT"] = "INCOMPLETELIMIT";
    ErrorType["EMPTYWHERE"] = "EMPTYWHERE";
    ErrorType["INCOMPLETENESTEDCONDITION"] = "INCOMPLETENESTEDCONDITION";
    ErrorType["INCOMPLETEANDORCONDITION"] = "INCOMPLETEANDORCONDITION";
    ErrorType["INCOMPLETENOTCONDITION"] = "INCOMPLETENOTCONDITION";
    ErrorType["UNRECOGNIZEDCOMPAREVALUE"] = "UNRECOGNIZEDCOMPAREVALUE";
    ErrorType["UNRECOGNIZEDCOMPAREOPERATOR"] = "UNRECOGNIZEDCOMPAREOPERATOR";
    ErrorType["UNRECOGNIZEDCOMPAREFIELD"] = "UNRECOGNIZEDCOMPAREFIELD";
    ErrorType["NOCOMPAREVALUE"] = "NOCOMPAREVALUE";
    ErrorType["NOCOMPAREOPERATOR"] = "NOCOMPAREOPERATOR";
    ErrorType["INCOMPLETEMULTIVALUELIST"] = "INCOMPLETEMULTIVALUELIST";
    ErrorType["UNEXPECTEDEOF"] = "UNEXPECTEDEOF";
})(ErrorType = exports.ErrorType || (exports.ErrorType = {}));
var SObjectFieldType;
(function (SObjectFieldType) {
    SObjectFieldType["Address"] = "address";
    SObjectFieldType["AnyType"] = "anytype";
    SObjectFieldType["Base64"] = "base64";
    SObjectFieldType["Boolean"] = "boolean";
    SObjectFieldType["Combobox"] = "combobox";
    SObjectFieldType["ComplexValue"] = "complexvalue";
    SObjectFieldType["Currency"] = "currency";
    SObjectFieldType["Date"] = "date";
    SObjectFieldType["DateTime"] = "datetime";
    SObjectFieldType["Double"] = "double";
    SObjectFieldType["Email"] = "email";
    SObjectFieldType["EncryptedString"] = "encryptedstring";
    SObjectFieldType["Id"] = "id";
    SObjectFieldType["Integer"] = "int";
    SObjectFieldType["Location"] = "location";
    SObjectFieldType["Long"] = "long";
    SObjectFieldType["MultiPicklist"] = "multipicklist";
    SObjectFieldType["Percent"] = "percent";
    SObjectFieldType["Phone"] = "phone";
    SObjectFieldType["Picklist"] = "picklist";
    SObjectFieldType["Reference"] = "reference";
    SObjectFieldType["String"] = "string";
    SObjectFieldType["TextArea"] = "textarea";
    SObjectFieldType["Time"] = "time";
    SObjectFieldType["Url"] = "url";
})(SObjectFieldType = exports.SObjectFieldType || (exports.SObjectFieldType = {}));
var UiOperatorValue;
(function (UiOperatorValue) {
    UiOperatorValue["EQ"] = "EQ";
    UiOperatorValue["NOT_EQ"] = "NOT_EQ";
    UiOperatorValue["ALT_NOT_EQ"] = "ALT_NOT_EQ";
    UiOperatorValue["LT_EQ"] = "LT_EQ";
    UiOperatorValue["GT_EQ"] = "GT_EQ";
    UiOperatorValue["LT"] = "LT";
    UiOperatorValue["GT"] = "GT";
    UiOperatorValue["LIKE"] = "LIKE";
    UiOperatorValue["LIKE_START"] = "LIKE_START";
    UiOperatorValue["LIKE_END"] = "LIKE_END";
    UiOperatorValue["LIKE_CONTAINS"] = "LIKE_CONTAINS";
    UiOperatorValue["IN"] = "IN";
    UiOperatorValue["NOT_IN"] = "NOT_IN";
    UiOperatorValue["INCLUDES"] = "INCLUDES";
    UiOperatorValue["EXCLUDES"] = "EXCLUDES";
})(UiOperatorValue = exports.UiOperatorValue || (exports.UiOperatorValue = {}));
class SyntaxOptions {
    constructor() {
        this.wrapColumn = 80;
        this.indent = 2;
    }
}
exports.SyntaxOptions = SyntaxOptions;
var Order;
(function (Order) {
    Order["Ascending"] = "ASC";
    Order["Descending"] = "DESC";
})(Order = exports.Order || (exports.Order = {}));
var NullsOrder;
(function (NullsOrder) {
    NullsOrder["First"] = "NULLS FIRST";
    NullsOrder["Last"] = "NULLS LAST";
})(NullsOrder = exports.NullsOrder || (exports.NullsOrder = {}));
var AndOr;
(function (AndOr) {
    AndOr["And"] = "AND";
    AndOr["Or"] = "OR";
})(AndOr = exports.AndOr || (exports.AndOr = {}));
var ConditionOperator;
(function (ConditionOperator) {
    ConditionOperator["Equals"] = "=";
    ConditionOperator["NotEquals"] = "!=";
    ConditionOperator["AlternateNotEquals"] = "<>";
    ConditionOperator["LessThanOrEqual"] = "<=";
    ConditionOperator["GreaterThanOrEqual"] = ">=";
    ConditionOperator["LessThan"] = "<";
    ConditionOperator["GreaterThan"] = ">";
    ConditionOperator["Like"] = "LIKE";
    ConditionOperator["In"] = "IN";
    ConditionOperator["NotIn"] = "NOT IN";
    ConditionOperator["Includes"] = "INCLUDES";
    ConditionOperator["Excludes"] = "EXCLUDES";
})(ConditionOperator = exports.ConditionOperator || (exports.ConditionOperator = {}));
var LiteralType;
(function (LiteralType) {
    LiteralType["Boolean"] = "BOOLEAN";
    LiteralType["Currency"] = "CURRENCY";
    LiteralType["Date"] = "DATE";
    LiteralType["Null"] = "NULL";
    LiteralType["Number"] = "NUMBER";
    LiteralType["String"] = "STRING";
})(LiteralType = exports.LiteralType || (exports.LiteralType = {}));
__exportStar(require("./unmodeled"), exports);
//# sourceMappingURL=model.js.map