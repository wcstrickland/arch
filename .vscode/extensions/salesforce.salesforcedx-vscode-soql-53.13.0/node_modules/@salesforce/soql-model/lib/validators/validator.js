"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultipleInputValidator = exports.DefaultOperatorValidator = exports.OperatorValidator = exports.DefaultValidator = exports.Validator = void 0;
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const messages_1 = require("../messages/messages");
const model_1 = require("../model/model");
const inputUtils_1 = require("./inputUtils");
class Validator {
    constructor(options) {
        this.options = options;
    }
}
exports.Validator = Validator;
class DefaultValidator extends Validator {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    validate(input) {
        return { isValid: true };
    }
}
exports.DefaultValidator = DefaultValidator;
// prettier-ignore
const LIKE_TYPES = [model_1.SObjectFieldType.Address, model_1.SObjectFieldType.AnyType, model_1.SObjectFieldType.Combobox, model_1.SObjectFieldType.ComplexValue, model_1.SObjectFieldType.Email, model_1.SObjectFieldType.EncryptedString, model_1.SObjectFieldType.Id, model_1.SObjectFieldType.Location, model_1.SObjectFieldType.MultiPicklist, model_1.SObjectFieldType.Phone, model_1.SObjectFieldType.Picklist, model_1.SObjectFieldType.Reference, model_1.SObjectFieldType.String, model_1.SObjectFieldType.TextArea, model_1.SObjectFieldType.Url];
// prettier-ignore
const allOperators = [
    { description: model_1.UiOperatorValue.EQ, display: '=', types: [model_1.SObjectFieldType.Address, model_1.SObjectFieldType.AnyType, model_1.SObjectFieldType.Base64, model_1.SObjectFieldType.Boolean, model_1.SObjectFieldType.Combobox, model_1.SObjectFieldType.ComplexValue, model_1.SObjectFieldType.Currency, model_1.SObjectFieldType.Date, model_1.SObjectFieldType.DateTime, model_1.SObjectFieldType.Double, model_1.SObjectFieldType.Email, model_1.SObjectFieldType.EncryptedString, model_1.SObjectFieldType.Id, model_1.SObjectFieldType.Integer, model_1.SObjectFieldType.Location, model_1.SObjectFieldType.Long, model_1.SObjectFieldType.MultiPicklist, model_1.SObjectFieldType.Percent, model_1.SObjectFieldType.Phone, model_1.SObjectFieldType.Picklist, model_1.SObjectFieldType.Reference, model_1.SObjectFieldType.String, model_1.SObjectFieldType.TextArea, model_1.SObjectFieldType.Time, model_1.SObjectFieldType.Url] },
    { description: model_1.UiOperatorValue.NOT_EQ, display: '!=', types: [model_1.SObjectFieldType.Address, model_1.SObjectFieldType.AnyType, model_1.SObjectFieldType.Base64, model_1.SObjectFieldType.Boolean, model_1.SObjectFieldType.Combobox, model_1.SObjectFieldType.ComplexValue, model_1.SObjectFieldType.Currency, model_1.SObjectFieldType.Date, model_1.SObjectFieldType.DateTime, model_1.SObjectFieldType.Double, model_1.SObjectFieldType.Email, model_1.SObjectFieldType.EncryptedString, model_1.SObjectFieldType.Id, model_1.SObjectFieldType.Integer, model_1.SObjectFieldType.Location, model_1.SObjectFieldType.Long, model_1.SObjectFieldType.MultiPicklist, model_1.SObjectFieldType.Percent, model_1.SObjectFieldType.Phone, model_1.SObjectFieldType.Picklist, model_1.SObjectFieldType.Reference, model_1.SObjectFieldType.String, model_1.SObjectFieldType.TextArea, model_1.SObjectFieldType.Time, model_1.SObjectFieldType.Url] },
    { description: model_1.UiOperatorValue.ALT_NOT_EQ, display: '<>', types: [model_1.SObjectFieldType.Address, model_1.SObjectFieldType.AnyType, model_1.SObjectFieldType.Base64, model_1.SObjectFieldType.Boolean, model_1.SObjectFieldType.Combobox, model_1.SObjectFieldType.ComplexValue, model_1.SObjectFieldType.Currency, model_1.SObjectFieldType.Date, model_1.SObjectFieldType.DateTime, model_1.SObjectFieldType.Double, model_1.SObjectFieldType.Email, model_1.SObjectFieldType.EncryptedString, model_1.SObjectFieldType.Id, model_1.SObjectFieldType.Integer, model_1.SObjectFieldType.Location, model_1.SObjectFieldType.Long, model_1.SObjectFieldType.MultiPicklist, model_1.SObjectFieldType.Percent, model_1.SObjectFieldType.Phone, model_1.SObjectFieldType.Picklist, model_1.SObjectFieldType.Reference, model_1.SObjectFieldType.String, model_1.SObjectFieldType.TextArea, model_1.SObjectFieldType.Time, model_1.SObjectFieldType.Url] },
    { description: model_1.UiOperatorValue.LT_EQ, display: '<=', types: [model_1.SObjectFieldType.Address, model_1.SObjectFieldType.AnyType, model_1.SObjectFieldType.Base64, model_1.SObjectFieldType.Combobox, model_1.SObjectFieldType.ComplexValue, model_1.SObjectFieldType.Currency, model_1.SObjectFieldType.Date, model_1.SObjectFieldType.DateTime, model_1.SObjectFieldType.Double, model_1.SObjectFieldType.Email, model_1.SObjectFieldType.EncryptedString, model_1.SObjectFieldType.Id, model_1.SObjectFieldType.Integer, model_1.SObjectFieldType.Location, model_1.SObjectFieldType.Long, model_1.SObjectFieldType.MultiPicklist, model_1.SObjectFieldType.Percent, model_1.SObjectFieldType.Phone, model_1.SObjectFieldType.Picklist, model_1.SObjectFieldType.Reference, model_1.SObjectFieldType.String, model_1.SObjectFieldType.TextArea, model_1.SObjectFieldType.Time, model_1.SObjectFieldType.Url] },
    { description: model_1.UiOperatorValue.GT_EQ, display: '>=', types: [model_1.SObjectFieldType.Address, model_1.SObjectFieldType.AnyType, model_1.SObjectFieldType.Base64, model_1.SObjectFieldType.Combobox, model_1.SObjectFieldType.ComplexValue, model_1.SObjectFieldType.Currency, model_1.SObjectFieldType.Date, model_1.SObjectFieldType.DateTime, model_1.SObjectFieldType.Double, model_1.SObjectFieldType.Email, model_1.SObjectFieldType.EncryptedString, model_1.SObjectFieldType.Id, model_1.SObjectFieldType.Integer, model_1.SObjectFieldType.Location, model_1.SObjectFieldType.Long, model_1.SObjectFieldType.MultiPicklist, model_1.SObjectFieldType.Percent, model_1.SObjectFieldType.Phone, model_1.SObjectFieldType.Picklist, model_1.SObjectFieldType.Reference, model_1.SObjectFieldType.String, model_1.SObjectFieldType.TextArea, model_1.SObjectFieldType.Time, model_1.SObjectFieldType.Url] },
    { description: model_1.UiOperatorValue.LT, display: '<', types: [model_1.SObjectFieldType.Address, model_1.SObjectFieldType.AnyType, model_1.SObjectFieldType.Base64, model_1.SObjectFieldType.Combobox, model_1.SObjectFieldType.ComplexValue, model_1.SObjectFieldType.Currency, model_1.SObjectFieldType.Date, model_1.SObjectFieldType.DateTime, model_1.SObjectFieldType.Double, model_1.SObjectFieldType.Email, model_1.SObjectFieldType.EncryptedString, model_1.SObjectFieldType.Id, model_1.SObjectFieldType.Integer, model_1.SObjectFieldType.Location, model_1.SObjectFieldType.Long, model_1.SObjectFieldType.MultiPicklist, model_1.SObjectFieldType.Percent, model_1.SObjectFieldType.Phone, model_1.SObjectFieldType.Picklist, model_1.SObjectFieldType.Reference, model_1.SObjectFieldType.String, model_1.SObjectFieldType.TextArea, model_1.SObjectFieldType.Time, model_1.SObjectFieldType.Url] },
    { description: model_1.UiOperatorValue.GT, display: '>', types: [model_1.SObjectFieldType.Address, model_1.SObjectFieldType.AnyType, model_1.SObjectFieldType.Base64, model_1.SObjectFieldType.Combobox, model_1.SObjectFieldType.ComplexValue, model_1.SObjectFieldType.Currency, model_1.SObjectFieldType.Date, model_1.SObjectFieldType.DateTime, model_1.SObjectFieldType.Double, model_1.SObjectFieldType.Email, model_1.SObjectFieldType.EncryptedString, model_1.SObjectFieldType.Id, model_1.SObjectFieldType.Integer, model_1.SObjectFieldType.Location, model_1.SObjectFieldType.Long, model_1.SObjectFieldType.MultiPicklist, model_1.SObjectFieldType.Percent, model_1.SObjectFieldType.Phone, model_1.SObjectFieldType.Picklist, model_1.SObjectFieldType.Reference, model_1.SObjectFieldType.String, model_1.SObjectFieldType.TextArea, model_1.SObjectFieldType.Time, model_1.SObjectFieldType.Url] },
    { description: model_1.UiOperatorValue.LIKE, display: 'LIKE', types: LIKE_TYPES },
    { description: model_1.UiOperatorValue.LIKE_START, display: 'LIKE', types: LIKE_TYPES },
    { description: model_1.UiOperatorValue.LIKE_END, display: 'LIKE', types: LIKE_TYPES },
    { description: model_1.UiOperatorValue.LIKE_CONTAINS, display: 'LIKE', types: LIKE_TYPES },
    { description: model_1.UiOperatorValue.IN, display: 'IN', types: [model_1.SObjectFieldType.Address, model_1.SObjectFieldType.AnyType, model_1.SObjectFieldType.Base64, model_1.SObjectFieldType.Boolean, model_1.SObjectFieldType.Combobox, model_1.SObjectFieldType.ComplexValue, model_1.SObjectFieldType.Currency, model_1.SObjectFieldType.Date, model_1.SObjectFieldType.DateTime, model_1.SObjectFieldType.Double, model_1.SObjectFieldType.Email, model_1.SObjectFieldType.EncryptedString, model_1.SObjectFieldType.Id, model_1.SObjectFieldType.Integer, model_1.SObjectFieldType.Location, model_1.SObjectFieldType.Long, model_1.SObjectFieldType.MultiPicklist, model_1.SObjectFieldType.Percent, model_1.SObjectFieldType.Phone, model_1.SObjectFieldType.Picklist, model_1.SObjectFieldType.Reference, model_1.SObjectFieldType.String, model_1.SObjectFieldType.TextArea, model_1.SObjectFieldType.Time, model_1.SObjectFieldType.Url] },
    { description: model_1.UiOperatorValue.NOT_IN, display: 'NOT IN', types: [model_1.SObjectFieldType.Address, model_1.SObjectFieldType.AnyType, model_1.SObjectFieldType.Base64, model_1.SObjectFieldType.Boolean, model_1.SObjectFieldType.Combobox, model_1.SObjectFieldType.ComplexValue, model_1.SObjectFieldType.Currency, model_1.SObjectFieldType.Date, model_1.SObjectFieldType.DateTime, model_1.SObjectFieldType.Double, model_1.SObjectFieldType.Email, model_1.SObjectFieldType.EncryptedString, model_1.SObjectFieldType.Id, model_1.SObjectFieldType.Integer, model_1.SObjectFieldType.Location, model_1.SObjectFieldType.Long, model_1.SObjectFieldType.MultiPicklist, model_1.SObjectFieldType.Percent, model_1.SObjectFieldType.Phone, model_1.SObjectFieldType.Picklist, model_1.SObjectFieldType.Reference, model_1.SObjectFieldType.String, model_1.SObjectFieldType.TextArea, model_1.SObjectFieldType.Time, model_1.SObjectFieldType.Url] },
    { description: model_1.UiOperatorValue.INCLUDES, display: 'INCLUDES', types: [model_1.SObjectFieldType.MultiPicklist] },
    { description: model_1.UiOperatorValue.EXCLUDES, display: 'EXCLUDES', types: [model_1.SObjectFieldType.MultiPicklist] }
];
class OperatorValidator extends Validator {
    validate(input) {
        const operator = allOperators.find((op) => op.description === input.toUpperCase().trim());
        const display = operator ? operator.display : input;
        const isValid = operator ? operator.types.includes(this.options.type) : false;
        const message = isValid ? undefined : messages_1.Messages.error_operatorInput.replace('{0}', display);
        return { isValid, message };
    }
}
exports.OperatorValidator = OperatorValidator;
class DefaultOperatorValidator extends OperatorValidator {
    getAcceptedOperators() {
        return allOperators.map((operator) => operator.description);
    }
}
exports.DefaultOperatorValidator = DefaultOperatorValidator;
class MultipleInputValidator extends Validator {
    constructor(options, delegateValidator) {
        super(options);
        this.options = options;
        this.delegateValidator = delegateValidator;
    }
    validate(input) {
        const values = inputUtils_1.splitMultiInputValues(input);
        if (values.length > 0) {
            for (const value of values) {
                const result = this.delegateValidator.validate(value);
                if (!result.isValid) {
                    return result;
                }
            }
        }
        else {
            return {
                isValid: false,
                message: messages_1.Messages.error_fieldInput_list,
            };
        }
        return { isValid: true };
    }
}
exports.MultipleInputValidator = MultipleInputValidator;
//# sourceMappingURL=validator.js.map