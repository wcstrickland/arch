"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Messages = void 0;
/* eslint-disable camelcase */
// prettier-ignore
// eslint-disable-next-line @typescript-eslint/no-namespace
var Messages;
(function (Messages) {
    Messages.error_empty = 'Incomplete SOQL statement. The SELECT and FROM clauses are required.';
    Messages.error_noSelect = 'A SELECT clause is required.';
    Messages.error_noSelections = 'Incomplete SELECT clause. The SELECT clause must contain at least one SELECT expression.';
    Messages.error_noFrom = 'A FROM clause is required.';
    Messages.error_incompleteFrom = 'Incomplete FROM clause. The FROM clause requires an object.';
    Messages.error_incompleteLimit = 'Incomplete LIMIT clause. The LIMIT keyword must be followed by a number.';
    Messages.error_emptyWhere = 'Incomplete WHERE clause. The WHERE clause must contain a condition.';
    Messages.error_incompleteNestedCondition = 'Incomplete condition. A closing parenthesis is required.';
    Messages.error_incompleteAndOrCondition = 'Incomplete condition. Conditions before and after the AND or OR keyword are required.';
    Messages.error_incompleteNotCondition = 'Incomplete condition. NOT must be followed by a condition.';
    Messages.error_unrecognizedCompareValue = 'Unrecognized comparison value.';
    Messages.error_unrecognizedCompareOperator = 'Unrecognized comparison operator.';
    Messages.error_unrecognizedCompareField = 'Unrecognized comparison field.';
    Messages.error_noCompareValue = 'Incomplete condition. Comparison value is required.';
    Messages.error_noCompareOperator = 'Incomplete condition. Comparison operator and value is required.';
    Messages.error_incompleteMultiValueList = 'Incomplete values list. Place values in parentheses, separated by commas.';
    Messages.error_unexpectedEOF = 'Unexpected end of file.';
    Messages.error_fieldInput_boolean = 'Value must be TRUE or FALSE';
    Messages.error_fieldInput_currency = 'Currency value is not valid';
    Messages.error_fieldInput_date = 'Date value is not valid';
    Messages.error_fieldInput_float = 'Value must be numeric';
    Messages.error_fieldInput_integer = 'Value must be a whole number';
    Messages.error_fieldInput_picklist = 'Value must be one of: {0}';
    Messages.error_fieldInput_string = 'Enclose value in single quotes';
    Messages.error_fieldInput_list = 'Input must be a comma separated list of values';
    Messages.error_operatorInput = "{0} operator can't be used for this field type";
    Messages.unmodeled_as = 'Object alias';
    Messages.unmodeled_using = 'USING SCOPE clause';
    Messages.unmodeled_alias = 'Field alias';
    Messages.unmodeled_semijoin = 'Subquery';
    Messages.unmodeled_typeof = 'TYPEOF clause';
    Messages.unmodeled_distance = 'DISTANCE expression';
    Messages.unmodeled_select = 'Unsupported SELECT expression';
    Messages.unmodeled_complexgroup = 'Complex condition containing NOT or a mix of AND and OR';
    Messages.unmodeled_count = 'COUNT function';
    Messages.unmodeled_with = 'WITH filtering expression';
    Messages.unmodeled_groupby = 'GROUP BY clause';
    Messages.unmodeled_offset = 'OFFSET clause';
    Messages.unmodeled_bind = 'BIND clause';
    Messages.unmodeled_recordtracking = 'Record tracking clause';
    Messages.unmodeled_update = 'Update statistics clause';
    Messages.unmodeled_functionreference = 'Function expression';
    Messages.unmodeled_colonexpression = 'Colon expression';
    Messages.unmodeled_emptycondition = 'Empty condition';
    Messages.unmodeled_calculatedcondition = 'Calculated condition field';
    Messages.unmodeled_distancecondition = 'DISTANCE condition';
    Messages.unmodeled_incolonexpressioncondition = 'Colon expression as IN value';
    Messages.unmodeled_insemijoincondition = 'Subquery as IN value';
})(Messages = exports.Messages || (exports.Messages = {}));
//# sourceMappingURL=messages.js.map