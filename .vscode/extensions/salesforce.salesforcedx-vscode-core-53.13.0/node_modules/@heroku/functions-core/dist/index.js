"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Benny = exports.getFunctionsBinary = exports.runFunction = exports.getProjectDescriptor = exports.FunctionsError = exports.generateFunction = exports.generateProject = void 0;
// These exports are for the type declarations
var project_1 = require("./generate/project");
Object.defineProperty(exports, "generateProject", { enumerable: true, get: function () { return project_1.generateProject; } });
var function_1 = require("./generate/function");
Object.defineProperty(exports, "generateFunction", { enumerable: true, get: function () { return function_1.generateFunction; } });
var functions_error_1 = require("./util/functions-error");
Object.defineProperty(exports, "FunctionsError", { enumerable: true, get: function () { return functions_error_1.FunctionsError; } });
var project_descriptor_1 = require("./util/project-descriptor");
Object.defineProperty(exports, "getProjectDescriptor", { enumerable: true, get: function () { return project_descriptor_1.getProjectDescriptor; } });
var function_2 = require("./run/function");
Object.defineProperty(exports, "runFunction", { enumerable: true, get: function () { return function_2.runFunction; } });
var functions_binary_1 = require("./run/functions-binary");
Object.defineProperty(exports, "getFunctionsBinary", { enumerable: true, get: function () { return functions_binary_1.getFunctionsBinary; } });
var benny_1 = require("./benny");
Object.defineProperty(exports, "Benny", { enumerable: true, get: function () { return benny_1.Benny; } });
// These exports are specifically to get around the fact that TS generates getters for all module members,
// which makes all of the exports un-mockable in Sinon, which seems bad
module.exports = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, require('./generate/project')), require('./generate/function')), require('./util/functions-error')), require('./util/project-descriptor')), require('./run/function')), require('./run/functions-binary')), require('./benny'));
