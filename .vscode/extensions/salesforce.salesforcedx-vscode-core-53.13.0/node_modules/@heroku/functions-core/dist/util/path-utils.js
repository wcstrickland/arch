"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveFunctionsPaths = exports.resolveFunctionsDirectory = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@salesforce/core");
const path = require("path");
const fs_extra_1 = require("fs-extra");
const PROJECT_JSON = 'sfdx-project.json';
const FUNCTIONS_DIR = 'functions';
function resolveFunctionsDirectory(sourcePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const sfdxProjectPath = yield core_1.SfdxProject.resolveProjectPath(sourcePath);
        const fnPath = path.join(sfdxProjectPath, FUNCTIONS_DIR);
        if (yield fs_extra_1.pathExists(fnPath)) {
            return fnPath;
        }
        throw new Error('No functions directory found.');
    });
}
exports.resolveFunctionsDirectory = resolveFunctionsDirectory;
function resolveFunctionsPaths(sourcePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const fnDir = yield resolveFunctionsDirectory(sourcePath);
        // This is the list of actual functions inside the `functions` directory
        const fnDirs = yield fs_extra_1.readdir(fnDir);
        if (!fnDirs.length) {
            throw new Error('The functions directory does contain any functions.');
        }
        return fnDirs.reduce((acc, fn) => {
            const fnPath = path.join(fnDir, fn);
            if (fs_extra_1.lstatSync(fnPath).isDirectory()) {
                acc.push(fnPath);
            }
            return acc;
        }, []);
    });
}
exports.resolveFunctionsPaths = resolveFunctionsPaths;
