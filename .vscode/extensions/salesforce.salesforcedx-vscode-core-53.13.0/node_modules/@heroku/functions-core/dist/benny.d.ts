export declare class Benny {
    private readonly binPath;
    private readonly emitter;
    readonly name: string;
    private readonly bucket;
    private readonly platform;
    private readonly version;
    private cancelled;
    private childProcesses;
    constructor();
    on(event: string | symbol, listener: (...args: any[]) => void): void;
    build(image: string, options: {
        [key: string]: any;
    }): Promise<unknown>;
    run(containerName: string, flags: {
        port?: number;
        'debug-port'?: number;
        env?: string[];
    }): Promise<unknown>;
    push(image: string, spaceId: string, registryPassword: string): Promise<unknown>;
    cancel(): void;
    private exec;
    private handleInput;
    private getEmitter;
    suffix(): string;
    get os(): string;
    majorVersion(): string;
    get binDir(): string;
    get tmpDir(): string;
    get keyDir(): string;
    get localFilename(): string;
    get localPath(): string;
    get tmpPath(): string;
    get latestPath(): string;
    get latestSigPath(): string;
    get publicKeyPath(): string;
    get etagPath(): string;
    get expirePath(): string;
    get url(): string;
    get latestUrl(): string;
    get latestSigUrl(): string;
}
