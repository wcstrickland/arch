"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateProject = void 0;
const projectGenerator_1 = require("@salesforce/templates/lib/generators/projectGenerator");
const fs = require("fs-extra");
const path = require("path");
const yeoman_environment_1 = require("yeoman-environment");
const functions_error_1 = require("../util/functions-error");
const options = {
    outputdir: '.',
    template: 'standard',
    loginurl: 'https://login.salesforce.com',
    defaultpackagedir: 'force-app',
    ns: '',
};
function generateProject(name) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        if (name.includes('-')) {
            throw new functions_error_1.FunctionsError('Project names may not include hyphens, please either remove them or use underscores.');
        }
        const projectPath = path.resolve(`./${name}`);
        if (yield fs.pathExists(projectPath)) {
            throw new functions_error_1.FunctionsError(`Directory ${name} already exists.`);
        }
        const env = yeoman_environment_1.createEnv();
        env.registerStub(projectGenerator_1.default, 'project-generator');
        try {
            yield env.run('project-generator', Object.assign(Object.assign({}, options), { projectname: name }), (err) => {
                if (err) {
                    throw err;
                }
            });
        }
        catch (error) {
            // This is an error that is specific to the yeoman-environment package. It comes up whenever
            // someone has a package.json in the directory they are trying to generate a project in, or
            // one of its ancestors. The default error message is also complete useless, so we'll catch it
            // instead of provide useful feedback
            if ((_a = error.message) === null || _a === void 0 ? void 0 : _a.includes('A name parameter is required to create a storage')) {
                throw new functions_error_1.FunctionsError('There was an issue generating the project. Please ensure there are no package.json ' +
                    'files in this directory or any of its parents.');
            }
            throw error;
        }
    });
}
exports.generateProject = generateProject;
