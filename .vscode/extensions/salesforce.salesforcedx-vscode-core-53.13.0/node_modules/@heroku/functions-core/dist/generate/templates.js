"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TEMPLATE_REGISTRY = exports.SFDX_SDK_VERSION = exports.PROJECT_JSON = exports.FUNCTIONS_DIR = void 0;
const fs_extra_1 = require("fs-extra");
const javaNameUtils = require("../util/java-name-utils");
const Handlebars = require("handlebars");
const path = require("path");
exports.FUNCTIONS_DIR = 'functions';
exports.PROJECT_JSON = 'sfdx-project.json';
const TEMPLATE_DIR = '../../templates';
// Get from SFDX config.  Query for latest versions in pre-hook?
exports.SFDX_SDK_VERSION = process.env.SFDX_SDK_VERSION || '^1.4.0';
/**
 * Base template class.  Writes project files.
 */
class Template {
    write(tplConfig) {
        // Create function dir, if applicable
        fs_extra_1.mkdirpSync(tplConfig.fnDir);
        this.writeLanguageFiles(tplConfig);
        this.writeFunctionToml(tplConfig);
    }
    get templateDir() {
        return path.join(__dirname, TEMPLATE_DIR, this.name);
    }
    // Write function.toml
    writeFunctionToml(tplConfig) {
        const tplArgs = { name: tplConfig.fnName };
        this.writeFileFromTemplate({
            fnDir: tplConfig.fnDir,
            toFile: 'project.toml',
            tplFile: path.join(__dirname, TEMPLATE_DIR, 'project.toml.tpl'),
            tplArgs,
        });
    }
    writeFileFromTemplate(writeTemplate) {
        const tplFileContents = fs_extra_1.readFileSync(writeTemplate.tplFile, 'utf8');
        const tplCompiled = Handlebars.compile(tplFileContents, writeTemplate.options);
        const fileContents = tplCompiled(writeTemplate.tplArgs);
        const file = path.join(writeTemplate.fnDir, writeTemplate.toFile);
        fs_extra_1.outputFileSync(file, fileContents);
    }
}
/**
 * Manages templates.
 */
class TemplateRegistry {
    constructor() {
        this.templates = [];
        this.templateNames = [];
    }
    registerTemplate(template) {
        if (this.templateNames.includes(template.name)) {
            throw new Error(`Template '${template.name}' already registered.`);
        }
        this.templates.push(template);
        this.templateNames.push(template.name);
    }
    getTemplate(name) {
        return this.templates.find((template) => name === template.name);
    }
}
exports.TEMPLATE_REGISTRY = new TemplateRegistry();
/**
 * Javascript template.
 */
class Javascript extends Template {
    constructor() {
        super(...arguments);
        this.fnNameCased = '';
    }
    get name() {
        return 'javascript';
    }
    writeLanguageFiles(tplConfig) {
        this.fnNameCased = tplConfig.fnNameCased;
        const fnDir = tplConfig.fnDir;
        // index.js
        this.writeFileFromTemplate({
            fnDir: fnDir,
            toFile: `index.${this.indexFileExtension}`,
            tplFile: path.join(this.templateDir, `index.${this.indexFileExtension}.tpl`),
            tplArgs: { fnNameCased: this.fnNameCased },
        });
        // package.json
        const fnNameHyphened = tplConfig.fnName.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();
        this.writeFileFromTemplate({
            fnDir: fnDir,
            toFile: 'package.json',
            tplFile: path.join(this.templateDir, 'package.json.tpl'),
            tplArgs: { fnNameHyphened: fnNameHyphened, sfSdkVersion: exports.SFDX_SDK_VERSION },
        });
        // README
        this.writeFileFromTemplate({
            fnDir: fnDir,
            toFile: 'README.md',
            tplFile: path.join(this.templateDir, 'README.md.tpl'),
            tplArgs: { fnNameCased: this.fnNameCased },
        });
        // eslint config
        this.writeFileFromTemplate({
            fnDir: tplConfig.fnDir,
            toFile: '.eslintrc',
            tplFile: path.join(this.templateDir, '.eslintrc.tpl'),
            tplArgs: {},
        });
        // mocha config
        this.writeFileFromTemplate({
            fnDir: tplConfig.fnDir,
            toFile: '.mocharc.json',
            tplFile: path.join(this.templateDir, '.mocharc.json.tpl'),
            tplArgs: {},
        });
        // Test
        const fnTestDir = path.join(tplConfig.fnDir, 'test');
        fs_extra_1.mkdirpSync(fnTestDir);
        this.writeFileFromTemplate({
            fnDir: fnTestDir,
            toFile: `index.test.${this.indexFileExtension}`,
            tplFile: path.join(this.templateDir, `test/index.test.${this.indexFileExtension}.tpl`),
            tplArgs: { fnNameCased: this.fnNameCased },
        });
    }
    get indexFileExtension() {
        return 'js';
    }
}
exports.TEMPLATE_REGISTRY.registerTemplate(new Javascript());
/**
 * Typescript template.
 */
class Typescript extends Javascript {
    get name() {
        return 'typescript';
    }
    write(tplConfig) {
        super.write(tplConfig);
        // Typescript config
        this.writeFileFromTemplate({
            fnDir: tplConfig.fnDir,
            toFile: 'tsconfig.json',
            tplFile: path.join(this.templateDir, 'tsconfig.json.tpl'),
            tplArgs: { fnNameCased: this.fnNameCased },
        });
    }
    get indexFileExtension() {
        return 'ts';
    }
}
exports.TEMPLATE_REGISTRY.registerTemplate(new Typescript());
/**
 * Java template.
 */
class Java extends Template {
    constructor() {
        super(...arguments);
        this.fnNameJavaClass = '';
        this.fnNameMavenArtifactId = '';
    }
    get name() {
        return 'java';
    }
    writeLanguageFiles(tplConfig) {
        this.fnNameJavaClass = javaNameUtils.toJavaClassName(tplConfig.fnName);
        this.fnNameMavenArtifactId = javaNameUtils.toMavenArtifactId(tplConfig.fnName);
        this.copyRecursivelySync(this.templateDir, tplConfig.fnDir);
    }
    copyRecursivelySync(dir, targetDir) {
        fs_extra_1.readdirSync(dir).forEach((entry) => {
            const fullEntryPath = path.join(dir, entry);
            if (fs_extra_1.lstatSync(fullEntryPath).isDirectory()) {
                fs_extra_1.mkdirpSync(fullEntryPath);
                this.copyRecursivelySync(fullEntryPath, path.join(targetDir, entry));
            }
            else {
                if (path.extname(entry) === '.tpl') {
                    const filename = entry.substring(0, entry.lastIndexOf('.'));
                    const filenameTemplate = Handlebars.compile(filename);
                    this.writeFileFromTemplate({
                        fnDir: targetDir,
                        toFile: filenameTemplate({ fnNameJavaClass: this.fnNameJavaClass }),
                        tplFile: fullEntryPath,
                        tplArgs: {
                            fnNameJavaClass: this.fnNameJavaClass,
                            fnNameMavenArtifactId: this.fnNameMavenArtifactId,
                        },
                    });
                    return;
                }
                fs_extra_1.copySync(fullEntryPath, path.join(targetDir, entry));
            }
        });
    }
}
exports.TEMPLATE_REGISTRY.registerTemplate(new Java());
