"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectDescriptor = void 0;
const ajv_1 = require("ajv");
const ajv_formats_1 = require("ajv-formats");
const fs = require("fs");
const path = require("path");
const toml = require("toml");
const util = require("util");
const salesforceProjectDescriptorSchemaPath = path.resolve(__dirname, '../schemas/salesforceProjectDescriptor.json');
const _SchemaPath = path.resolve(__dirname, '../schemas/_.json');
const comSalesforceSchemaPath = path.resolve(__dirname, '../schemas/com.salesforce.json');
const readFile = util.promisify(fs.readFile);
class ProjectDescriptor {
    constructor() {
        this.validator = this.createValidator();
    }
    async parseFile(filepath) {
        let fileBuf;
        try {
            fileBuf = await readFile(filepath);
        }
        catch (error) {
            throw new Error(`Invalid project.toml - File Not Found: ${error.message}`);
        }
        let tomlData;
        try {
            tomlData = toml.parse(fileBuf.toString());
        }
        catch (error) {
            throw new Error(`Invalid project.toml - Toml Syntax: ${error.message}`);
        }
        return this.parseData(tomlData);
    }
    async parseData(data) {
        const validate = await this.validator;
        if (validate(data)) {
            return data;
        }
        let message = 'Invalid project.toml - Schema Violation';
        if (validate.errors) {
            message += ': ';
            message += validate.errors.map(err => {
                return `${err.schemaPath} ${err.message}`;
            }).join(', ');
        }
        throw new Error(message);
    }
    async readSchema(path) {
        let schemaBuf;
        try {
            schemaBuf = await readFile(path);
        }
        catch (error) {
            throw new Error(`Invalid project.toml schema - File Not Found: ${error.message}`);
        }
        try {
            return JSON.parse(schemaBuf.toString());
        }
        catch (error) {
            throw new Error(`Invalid project.toml schema - JSON Syntax ${error.message}`);
        }
    }
    async createValidator() {
        const _Schema = await this.readSchema(_SchemaPath);
        const comSalesforceSchema = await this.readSchema(comSalesforceSchemaPath);
        const salesforceProjectDescriptorSchema = await this.readSchema(salesforceProjectDescriptorSchemaPath);
        const ajv = new ajv_1.default();
        ajv_formats_1.default(ajv);
        return ajv.addSchema(_Schema).addSchema(comSalesforceSchema).compile(salesforceProjectDescriptorSchema);
    }
}
exports.ProjectDescriptor = ProjectDescriptor;
