/// <reference types="node" />
import { EventEmitter } from 'events';
import { SObjectShortDescription } from '../describe';
import { SObject, SObjectDefinitionRetriever, SObjectGenerator, SObjectRefreshOutput as SObjectRefreshData, SObjectRefreshResult } from '../types';
export interface CancellationToken {
    isCancellationRequested: boolean;
}
export declare type SObjectRefreshTransformData = SObjectRefreshData & {
    typeNames: SObjectShortDescription[];
    standard: SObject[];
    custom: SObject[];
    error?: {
        message: string;
        stack?: string;
    };
};
export declare class SObjectTransformer {
    private emitter;
    private cancellationToken;
    private result;
    private retrievers;
    private generators;
    constructor(emitter: EventEmitter, retrievers: SObjectDefinitionRetriever[], generators: SObjectGenerator[], cancellationToken?: CancellationToken);
    transform(projectPath: string): Promise<SObjectRefreshResult>;
    private initializeData;
    private didCancel;
    private errorExit;
    private successExit;
    private cancelExit;
    private logSObjects;
}
