"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForceIgnore = void 0;
const index_1 = require("ignore/index");
const path_1 = require("path");
const graceful_fs_1 = require("graceful-fs");
const fileSystemHandler_1 = require("../utils/fileSystemHandler");
class ForceIgnore {
    constructor(forceIgnorePath = '') {
        this.DEFAULT_IGNORE = [
            '**/*.dup',
            '**/.*',
            '**/package2-descriptor.json',
            '**/package2-manifest.json',
        ];
        try {
            this.contents = graceful_fs_1.readFileSync(forceIgnorePath, 'utf-8');
            // check if file `.forceignore` exists
            if (this.contents !== undefined) {
                // add the default ignore paths, and then parse the .forceignore file
                this.parser = index_1.default().add(`${this.contents}\n${this.DEFAULT_IGNORE.join('\n')}`);
                this.forceIgnoreDirectory = path_1.dirname(forceIgnorePath);
            }
        }
        catch (e) {
            // TODO: log no force ignore
        }
    }
    /**
     * Performs an upward directory search for a `.forceignore` file and returns a
     * `ForceIgnore` object based on the result. If there is no `.forceignore` file,
     * the returned `ForceIgnore` object will accept everything.
     *
     * @param seed Path to begin the `.forceignore` search from
     */
    static findAndCreate(seed) {
        let potentialForceIgnorePath = '';
        const projectConfigPath = fileSystemHandler_1.searchUp(seed, ForceIgnore.FILE_NAME);
        if (projectConfigPath) {
            potentialForceIgnorePath = path_1.join(path_1.dirname(projectConfigPath), ForceIgnore.FILE_NAME);
        }
        return new ForceIgnore(potentialForceIgnorePath);
    }
    denies(fsPath) {
        try {
            return this.parser.ignores(path_1.relative(this.forceIgnoreDirectory, fsPath));
        }
        catch (e) {
            return false;
        }
    }
    accepts(fsPath) {
        try {
            return !this.parser.ignores(path_1.relative(this.forceIgnoreDirectory, fsPath));
        }
        catch (e) {
            return true;
        }
    }
}
exports.ForceIgnore = ForceIgnore;
ForceIgnore.FILE_NAME = '.forceignore';
//# sourceMappingURL=forceIgnore.js.map