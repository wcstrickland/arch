"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConvertContext = void 0;
const path_1 = require("path");
const streams_1 = require("./streams");
const common_1 = require("../common");
const ts_types_1 = require("@salesforce/ts-types");
const collections_1 = require("../collections");
const collections_2 = require("../utils/collections");
const kit_1 = require("@salesforce/kit");
class ConvertTransactionFinalizer {
    setState(props) {
        props(this._state);
    }
    get state() {
        return this._state;
    }
}
/**
 * Merges child components that share the same parent in the conversion pipeline
 * into a single file.
 */
class RecompositionFinalizer extends ConvertTransactionFinalizer {
    constructor() {
        super(...arguments);
        this._state = {};
        // A cache of SourceComponent xml file paths to parsed contents so that identical child xml
        // files are not read and parsed multiple times.
        this.parsedXmlCache = new Map();
    }
    finalize() {
        return __awaiter(this, void 0, void 0, function* () {
            const writerData = [];
            for (const { component: parent, children } of Object.values(this.state)) {
                const recomposedXmlObj = yield this.recompose(children, parent);
                writerData.push({
                    component: parent,
                    writeInfos: [
                        {
                            source: new streams_1.JsToXml(recomposedXmlObj),
                            output: path_1.join(parent.type.directoryName, `${parent.fullName}.${parent.type.suffix}`),
                        },
                    ],
                });
            }
            return writerData;
        });
    }
    recompose(children, parent) {
        return __awaiter(this, void 0, void 0, function* () {
            // When recomposing children that are non-decomposed, read and cache the parent XML to prevent
            // reading the parent source file (referenced in all child SourceComponents) multiple times.
            let parentXml;
            if (parent.type.strategies.transformer === "nonDecomposed" /* NonDecomposed */) {
                parentXml = yield parent.parseXml();
                this.parsedXmlCache.set(parent.xml, parentXml);
            }
            const parentXmlObj = parent.type.strategies.recomposition === "startEmpty" /* StartEmpty */
                ? {}
                : parentXml !== null && parentXml !== void 0 ? parentXml : (yield parent.parseXml());
            for (const child of children) {
                const { directoryName: groupName } = child.type;
                const { name: parentName } = child.parent.type;
                const childSourceComponent = child;
                let xmlObj;
                if (parentXml) {
                    // If the xml file for the child is in the cache, use it. Otherwise
                    // read and cache the xml file that contains this child and use it.
                    if (!this.parsedXmlCache.has(childSourceComponent.xml)) {
                        this.parsedXmlCache.set(childSourceComponent.xml, yield parent.parseXml(childSourceComponent.xml));
                    }
                    xmlObj = childSourceComponent.parseFromParentXml(this.parsedXmlCache.get(childSourceComponent.xml));
                }
                else {
                    xmlObj = yield childSourceComponent.parseXml();
                }
                const childContents = xmlObj[child.type.name] || xmlObj;
                if (!parentXmlObj[parentName]) {
                    parentXmlObj[parentName] = { [common_1.XML_NS_KEY]: common_1.XML_NS_URL };
                }
                // type safe way of checking childContents for the key
                if (ts_types_1.getString(childContents, common_1.XML_NS_KEY)) {
                    // child don't need to be written with `xmlns="http://soap.sforce.com/2006/04/metadata"` attribute
                    delete childContents[common_1.XML_NS_KEY];
                }
                const parentObj = parentXmlObj[parentName];
                if (!parentObj[groupName]) {
                    parentObj[groupName] = [];
                }
                // it might be an object and not an array.  Example: custom object with a Field property containing a single field
                const group = collections_2.normalizeToArray(parentObj[groupName]);
                group.push(childContents);
            }
            return parentXmlObj;
        });
    }
}
/**
 * Creates write infos for any children that haven't been written yet. Children may
 * delay being written in order to find potential existing children to merge
 * with in the conversion pipeline.
 */
class DecompositionFinalizer extends ConvertTransactionFinalizer {
    constructor() {
        super(...arguments);
        this._state = {};
    }
    finalize() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const writerData = [];
            for (const toDecompose of Object.values(this._state)) {
                if (!toDecompose.foundMerge) {
                    writerData.push({
                        component: (_a = toDecompose.origin.parent) !== null && _a !== void 0 ? _a : toDecompose.origin,
                        writeInfos: [toDecompose.writeInfo],
                    });
                }
            }
            return writerData;
        });
    }
}
/**
 * Merges child components that share the same parent in the conversion pipeline
 * into a single file.
 *
 * Inserts unclaimed child components into the parent that belongs to the default package
 */
class NonDecompositionFinalizer extends ConvertTransactionFinalizer {
    constructor() {
        super(...arguments);
        this._state = {
            unclaimed: {},
            claimed: {},
        };
    }
    finalize(defaultDirectory) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.finalizeState(defaultDirectory);
            const writerData = [];
            for (const { parent, children } of Object.values(this.state.claimed)) {
                const recomposedXmlObj = yield this.recompose(Object.values(children), parent);
                writerData.push({
                    component: parent,
                    writeInfos: [{ source: new streams_1.JsToXml(recomposedXmlObj), output: parent.xml }],
                });
            }
            for (const { parent, children } of Object.values(this.state.unclaimed)) {
                const recomposedXmlObj = yield this.recompose(Object.values(children), parent);
                writerData.push({
                    component: parent,
                    writeInfos: [
                        { source: new streams_1.JsToXml(recomposedXmlObj), output: this.getDefaultOutput(parent) },
                    ],
                });
            }
            return writerData;
        });
    }
    /**
     * This method finalizes the state by:
     * - finding any "unprocessed components" (nondecomposed metadata types can exist in multiple locations under the same name
     *   so we have to find all components that could potentially claim children)
     * - removing any children from the unclaimed state that have been claimed by the unprocessed components
     * - removing any children from the unclaimed state that have already been claimed by a prent in the claimed state
     * - merging the remaining unclaimed children into the default parent component (either the component that matches the
     *   defaultDirectory or the first parent component)
     */
    finalizeState(defaultDirectory) {
        return __awaiter(this, void 0, void 0, function* () {
            if (kit_1.isEmpty(this.state.claimed)) {
                return;
            }
            const unprocessedComponents = this.getUnprocessedComponents(defaultDirectory);
            const parentPaths = Object.keys(this.state.claimed).concat(unprocessedComponents.map((c) => c.xml));
            const defaultComponentKey = parentPaths.find((p) => p.startsWith(defaultDirectory)) || parentPaths[0];
            const claimedChildren = [
                ...this.getClaimedChildrenNames(),
                ...(yield this.getChildrenOfUnprocessedComponents(unprocessedComponents)),
            ];
            // merge unclaimed children into default parent component
            for (const [key, childIndex] of Object.entries(this.state.unclaimed)) {
                const pruned = Object.entries(childIndex.children).reduce((result, [childName, childXml]) => {
                    return !claimedChildren.includes(childName)
                        ? Object.assign(result, { [childName]: childXml })
                        : result;
                }, {});
                delete this.state.unclaimed[key];
                if (this.state.claimed[defaultComponentKey]) {
                    this.state.claimed[defaultComponentKey].children = Object.assign({}, this.state.claimed[defaultComponentKey].children, pruned);
                }
            }
        });
    }
    /**
     * Returns the "unprocessed components"
     *
     * An unprocessed component is a component that was not resolved during component resolution.
     * This typically only happens when a specific source path was resolved. This is problematic for
     * nondecomposed metadata types (like CustomLabels) because we need to know the location of each
     * child type before recomposing the final xml. So in order for each of the children to be properly
     * claimed, we have to create new ComponentSet that will have all the parent components.
     */
    getUnprocessedComponents(defaultDirectory) {
        if (kit_1.isEmpty(this.state.unclaimed)) {
            return [];
        }
        const parents = this.getParentsOfClaimedChildren();
        const filterSet = new collections_1.ComponentSet(parents);
        const { tree } = parents[0];
        const projectDir = path_1.resolve(path_1.dirname(defaultDirectory));
        const parentDirs = Object.keys(this.state.claimed).map((k) => {
            const parts = k.split(path_1.sep);
            const partIndex = parts.findIndex((p) => path_1.basename(projectDir) === p);
            return parts[partIndex + 1];
        });
        const fsPaths = tree
            .readDirectory(projectDir)
            .map((p) => path_1.join(projectDir, p))
            .filter((p) => {
            const dirName = path_1.basename(p);
            // Only return directories that are likely to be a project directory
            return (tree.isDirectory(p) &&
                !dirName.startsWith('.') &&
                dirName !== 'config' &&
                dirName !== 'node_modules' &&
                !parentDirs.includes(dirName));
        });
        const unprocessedComponents = collections_1.ComponentSet.fromSource({ fsPaths, include: filterSet })
            .getSourceComponents()
            .filter((component) => !this.state.claimed[component.xml]);
        return unprocessedComponents.toArray();
    }
    /**
     * Returns the children of "unprocessed components"
     */
    getChildrenOfUnprocessedComponents(unprocessedComponents) {
        return __awaiter(this, void 0, void 0, function* () {
            const childrenOfUnprocessed = [];
            for (const component of unprocessedComponents) {
                for (const child of component.getChildren()) {
                    const xml = yield child.parseXml();
                    const childName = ts_types_1.getString(xml, child.type.uniqueIdElement);
                    childrenOfUnprocessed.push(childName);
                }
            }
            return childrenOfUnprocessed;
        });
    }
    recompose(children, parent) {
        return __awaiter(this, void 0, void 0, function* () {
            const parentXmlObj = parent.type.strategies.recomposition === "startEmpty" /* StartEmpty */
                ? {}
                : yield parent.parseXml();
            const groupName = parent.type.directoryName;
            const parentName = parent.type.name;
            for (const child of children) {
                if (!parentXmlObj[parentName]) {
                    parentXmlObj[parentName] = { [common_1.XML_NS_KEY]: common_1.XML_NS_URL };
                }
                const parent = parentXmlObj[parentName];
                if (!parent[groupName]) {
                    parent[groupName] = [];
                }
                const group = collections_2.normalizeToArray(parent[groupName]);
                group.push(child);
            }
            return parentXmlObj;
        });
    }
    getDefaultOutput(component) {
        const { fullName } = component;
        const [baseName] = fullName.split('.');
        const output = `${baseName}.${component.type.suffix}${common_1.META_XML_SUFFIX}`;
        return path_1.join(component.getPackageRelativePath('', 'source'), output);
    }
    getClaimedChildrenNames() {
        return Object.values(this.state.claimed).reduce((x, y) => x.concat(Object.keys(y.children)), []);
    }
    getParentsOfClaimedChildren() {
        return Object.values(this.state.claimed).reduce((x, y) => x.concat([y.parent]), []);
    }
}
/**
 * A state manager over the course of a single metadata conversion call.
 */
class ConvertContext {
    constructor() {
        this.decomposition = new DecompositionFinalizer();
        this.recomposition = new RecompositionFinalizer();
        this.nonDecomposition = new NonDecompositionFinalizer();
    }
    executeFinalizers(defaultDirectory) {
        return __asyncGenerator(this, arguments, function* executeFinalizers_1() {
            for (const member of Object.values(this)) {
                if (member instanceof ConvertTransactionFinalizer) {
                    yield yield __await(member.finalize(defaultDirectory));
                }
            }
        });
    }
}
exports.ConvertContext = ConvertContext;
//# sourceMappingURL=convertContext.js.map