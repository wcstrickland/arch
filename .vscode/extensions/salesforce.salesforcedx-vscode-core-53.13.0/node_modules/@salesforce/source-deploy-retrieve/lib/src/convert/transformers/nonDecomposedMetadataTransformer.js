"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NonDecomposedMetadataTransformer = void 0;
const decomposedMetadataTransformer_1 = require("./decomposedMetadataTransformer");
const ts_types_1 = require("@salesforce/ts-types");
const utils_1 = require("../../utils");
/**
 * Metadata Transformer for metadata types with children types that are NOT decomposed into separate files.
 *
 * Example Types:
 * - CustomLabels
 */
class NonDecomposedMetadataTransformer extends decomposedMetadataTransformer_1.DecomposedMetadataTransformer {
    toSourceFormat(component, mergeWith) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const parentXml = yield component.parseXml();
            const xmlPathToChildren = `${component.type.name}.${component.type.directoryName}`;
            const incomingChildrenXml = utils_1.normalizeToArray(ts_types_1.get(parentXml, xmlPathToChildren));
            const children = (_a = mergeWith === null || mergeWith === void 0 ? void 0 : mergeWith.getChildren()) !== null && _a !== void 0 ? _a : [];
            const claimedChildren = children.map((c) => c.name);
            const [childTypeId] = Object.keys(component.type.children.types);
            const { uniqueIdElement } = component.type.children.types[childTypeId];
            for (const child of incomingChildrenXml) {
                const childName = ts_types_1.getString(child, uniqueIdElement);
                if (claimedChildren.includes(childName)) {
                    this.setStateForClaimed(mergeWith, childName, child);
                }
                else {
                    this.setStateForUnclaimed(component, childName, child);
                }
            }
            return [];
        });
    }
    setStateForClaimed(parent, childName, child) {
        this.context.nonDecomposition.setState((state) => {
            var _a, _b, _c;
            const existingChildren = (_b = (_a = state.claimed[parent.xml]) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : {};
            const updatedChildren = Object.assign({}, existingChildren, { [childName]: child });
            state.claimed[parent.xml] = Object.assign((_c = state.claimed[parent.xml]) !== null && _c !== void 0 ? _c : {}, {
                parent,
                children: updatedChildren,
            });
        });
    }
    setStateForUnclaimed(parent, childName, child) {
        this.context.nonDecomposition.setState((state) => {
            var _a, _b, _c;
            const existingChildren = (_b = (_a = state.unclaimed[parent.xml]) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : {};
            const updatedChildren = Object.assign({}, existingChildren, { [childName]: child });
            state.unclaimed[parent.xml] = Object.assign((_c = state.unclaimed[parent.xml]) !== null && _c !== void 0 ? _c : {}, {
                parent,
                children: updatedChildren,
            });
        });
    }
}
exports.NonDecomposedMetadataTransformer = NonDecomposedMetadataTransformer;
//# sourceMappingURL=nonDecomposedMetadataTransformer.js.map