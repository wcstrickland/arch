import { SourcePath } from '../common';
import { MetadataResolver, SourceComponent } from '../resolve';
import { SourceDeployResult, SourceRetrieveResult } from './types';
import { ComponentSet } from '../collections';
import { Connection } from '@salesforce/core';
import { RegistryAccess } from '../registry';
declare type WithNamespace = {
    namespace?: string;
};
export declare type ToolingDeployOptions = WithNamespace;
export declare type ToolingRetrieveOptions = WithNamespace & {
    output?: string;
};
export declare const deployTypes: Map<string, string>;
export declare class ToolingApi {
    protected connection: Connection;
    protected resolver: MetadataResolver;
    protected registry: RegistryAccess;
    constructor(connection: Connection, resolver: MetadataResolver, registry?: RegistryAccess);
    retrieveWithPaths(options: ToolingRetrieveOptions & {
        paths: string[];
    }): Promise<SourceRetrieveResult>;
    retrieve(options: ToolingRetrieveOptions & {
        components: ComponentSet;
    }): Promise<SourceRetrieveResult>;
    deploy(components: SourceComponent | SourceComponent[], options?: ToolingDeployOptions): Promise<SourceDeployResult>;
    deployWithPaths(path: SourcePath, options?: ToolingDeployOptions): Promise<SourceDeployResult>;
}
export {};
