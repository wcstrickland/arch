"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticResourceMetadataTransformer = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const baseMetadataTransformer_1 = require("./baseMetadataTransformer");
const archiver_1 = require("archiver");
const mime_1 = require("mime");
const unzipper_1 = require("unzipper");
const path_1 = require("path");
const utils_1 = require("../../utils");
const errors_1 = require("../../errors");
class StaticResourceMetadataTransformer extends baseMetadataTransformer_1.BaseMetadataTransformer {
    toMetadataFormat(component) {
        return __awaiter(this, void 0, void 0, function* () {
            const { content, type, xml } = component;
            let contentSource;
            if (yield this.componentIsExpandedArchive(component)) {
                // toolbelt was using level 9 for static resources, so we'll do the same.
                // Otherwise, you'll see errors like https://github.com/forcedotcom/cli/issues/1098
                const zip = archiver_1.create('zip', { zlib: { level: 9 } });
                zip.directory(content, false);
                zip.finalize();
                contentSource = zip;
            }
            else {
                contentSource = component.tree.stream(content);
            }
            return [
                {
                    source: contentSource,
                    output: path_1.join(type.directoryName, `${utils_1.baseName(content)}.${type.suffix}`),
                },
                {
                    source: component.tree.stream(xml),
                    output: path_1.join(type.directoryName, path_1.basename(xml)),
                },
            ];
        });
    }
    toSourceFormat(component, mergeWith) {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { xml, content } = component;
            const writeInfos = [];
            if (content) {
                const componentContentType = yield this.getContentType(component);
                const mergeContentPath = mergeWith === null || mergeWith === void 0 ? void 0 : mergeWith.content;
                const baseContentPath = this.getBaseContentPath(component, mergeWith);
                // only unzip an archive component if there isn't a merge component, or the merge component is itself expanded
                const shouldUnzipArchive = StaticResourceMetadataTransformer.ARCHIVE_MIME_TYPES.has(componentContentType) &&
                    (!mergeWith || mergeWith.tree.isDirectory(mergeContentPath));
                if (shouldUnzipArchive) {
                    const zipBuffer = yield component.tree.readFile(content);
                    try {
                        for (var _b = __asyncValues(this.createWriteInfosFromArchive(zipBuffer, baseContentPath)), _c; _c = yield _b.next(), !_c.done;) {
                            const info = _c.value;
                            writeInfos.push(info);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else {
                    const extension = this.getExtensionFromType(componentContentType);
                    writeInfos.push({
                        source: component.tree.stream(content),
                        output: `${baseContentPath}.${extension}`,
                    });
                }
                writeInfos.push({
                    source: component.tree.stream(xml),
                    output: (mergeWith === null || mergeWith === void 0 ? void 0 : mergeWith.xml) || component.getPackageRelativePath(path_1.basename(xml), 'source'),
                });
            }
            return writeInfos;
        });
    }
    getBaseContentPath(component, mergeWith) {
        const baseContentPath = (mergeWith === null || mergeWith === void 0 ? void 0 : mergeWith.content) || component.getPackageRelativePath(component.content, 'source');
        return path_1.join(path_1.dirname(baseContentPath), utils_1.baseName(baseContentPath));
    }
    /**
     * "Expanded" refers to a component whose content file is a zip file, and its current
     * state is unzipped.
     */
    componentIsExpandedArchive(component) {
        return __awaiter(this, void 0, void 0, function* () {
            const { content, tree } = component;
            if (tree.isDirectory(content)) {
                const contentType = yield this.getContentType(component);
                if (StaticResourceMetadataTransformer.ARCHIVE_MIME_TYPES.has(contentType)) {
                    return true;
                }
                throw new errors_1.LibraryError('error_static_resource_expected_archive_type', [
                    contentType,
                    component.name,
                ]);
            }
            return false;
        });
    }
    createWriteInfosFromArchive(zipBuffer, baseDir) {
        return __asyncGenerator(this, arguments, function* createWriteInfosFromArchive_1() {
            const directory = yield __await(unzipper_1.Open.buffer(zipBuffer));
            for (const entry of directory.files) {
                if (entry.type === 'File') {
                    yield yield __await({
                        source: entry.stream(),
                        output: path_1.join(baseDir, entry.path),
                    });
                }
            }
        });
    }
    getContentType(component) {
        return __awaiter(this, void 0, void 0, function* () {
            const resource = (yield component.parseXml()).StaticResource;
            if (!resource || !resource.hasOwnProperty('contentType')) {
                throw new errors_1.LibraryError('error_static_resource_missing_resource_file', [
                    path_1.join('staticresources', component.name),
                ]);
            }
            return resource.contentType;
        });
    }
    getExtensionFromType(contentType) {
        // return registered ext, fallback, or the default (application/octet-stream -> bin)
        return (mime_1.getExtension(contentType) ||
            StaticResourceMetadataTransformer.FALLBACK_TYPE_MAP.get(contentType) ||
            mime_1.getExtension(StaticResourceMetadataTransformer.DEFAULT_CONTENT_TYPE));
    }
}
exports.StaticResourceMetadataTransformer = StaticResourceMetadataTransformer;
StaticResourceMetadataTransformer.ARCHIVE_MIME_TYPES = new Set([
    'application/zip',
    'application/x-zip-compressed',
    'application/jar',
]);
StaticResourceMetadataTransformer.DEFAULT_CONTENT_TYPE = 'application/octet-stream';
StaticResourceMetadataTransformer.FALLBACK_TYPE_MAP = new Map([
    ['text/javascript', 'js'],
    ['application/x-javascript', 'js'],
    ['application/x-zip-compressed', 'zip'],
    ['text/x-haml', 'haml'],
    ['image/x-png', 'png'],
    ['text/xml', 'xml'],
]);
//# sourceMappingURL=staticResourceMetadataTransformer.js.map