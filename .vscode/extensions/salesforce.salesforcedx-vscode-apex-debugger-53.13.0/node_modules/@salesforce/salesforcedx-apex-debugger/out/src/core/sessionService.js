"use strict";
/*
 * Copyright (c) 2017, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_1 = require("@salesforce/salesforcedx-utils-vscode/out/src/cli");
class SessionService {
    constructor(requestService) {
        this.connected = false;
        this.requestService = requestService;
    }
    withUserFilter(filter) {
        this.userFilter = filter || '';
        return this;
    }
    withRequestFilter(filter) {
        this.requestFilter = filter || '';
        return this;
    }
    withEntryFilter(filter) {
        this.entryFilter = filter || '';
        return this;
    }
    forProject(project) {
        this.project = project || '';
        return this;
    }
    isConnected() {
        return this.connected;
    }
    getSessionId() {
        return this.sessionId;
    }
    isApexDebuggerSessionId(id) {
        return id != null && id.startsWith('07a');
    }
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            const execution = new cli_1.CliCommandExecutor(new cli_1.SfdxCommandBuilder()
                .withArg('force:data:record:create')
                .withFlag('--sobjecttype', 'ApexDebuggerSession')
                .withFlag('--values', `UserIdFilter='${this.userFilter}' EntryPointFilter='${this.entryFilter}' RequestTypeFilter='${this.requestFilter}'`)
                .withArg('--usetoolingapi')
                .withJson()
                .build(), {
                cwd: this.project,
                env: this.requestService.getEnvVars()
            }).execute();
            const cmdOutput = new cli_1.CommandOutput();
            const result = yield cmdOutput.getCmdResult(execution);
            try {
                const sessionId = JSON.parse(result).result.id;
                if (this.isApexDebuggerSessionId(sessionId)) {
                    this.sessionId = sessionId;
                    this.connected = true;
                    return Promise.resolve(this.sessionId);
                }
                else {
                    this.sessionId = '';
                    this.connected = false;
                    return Promise.reject(result);
                }
            }
            catch (e) {
                return Promise.reject(result);
            }
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            const execution = new cli_1.CliCommandExecutor(new cli_1.SfdxCommandBuilder()
                .withArg('force:data:record:update')
                .withFlag('--sobjecttype', 'ApexDebuggerSession')
                .withFlag('--sobjectid', this.sessionId)
                .withFlag('--values', "Status='Detach'")
                .withArg('--usetoolingapi')
                .withJson()
                .build(), { cwd: this.project, env: this.requestService.getEnvVars() }).execute();
            const cmdOutput = new cli_1.CommandOutput();
            const result = yield cmdOutput.getCmdResult(execution);
            try {
                const sessionId = JSON.parse(result).result.id;
                if (this.isApexDebuggerSessionId(sessionId)) {
                    this.sessionId = '';
                    this.connected = false;
                    return Promise.resolve(sessionId);
                }
                else {
                    this.connected = true;
                    return Promise.reject(result);
                }
            }
            catch (e) {
                return Promise.reject(result);
            }
        });
    }
    forceStop() {
        this.sessionId = '';
        this.connected = false;
    }
}
exports.SessionService = SessionService;
//# sourceMappingURL=sessionService.js.map