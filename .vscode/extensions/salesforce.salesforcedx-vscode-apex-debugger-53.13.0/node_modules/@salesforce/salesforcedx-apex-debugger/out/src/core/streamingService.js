"use strict";
/*
 * Copyright (c) 2017, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const streamingClient_1 = require("./streamingClient");
class StreamingService {
    constructor() {
        this.apiVersion = '41.0';
    }
    static getInstance() {
        if (!StreamingService.instance) {
            StreamingService.instance = new StreamingService();
        }
        return StreamingService.instance;
    }
    getClient(type) {
        switch (type) {
            case streamingClient_1.ApexDebuggerEventType.ApexException:
            case streamingClient_1.ApexDebuggerEventType.Debug:
            case streamingClient_1.ApexDebuggerEventType.LogLine: {
                return this.userEventClient;
            }
            case streamingClient_1.ApexDebuggerEventType.OrgChange:
            case streamingClient_1.ApexDebuggerEventType.Ready:
            case streamingClient_1.ApexDebuggerEventType.RequestFinished:
            case streamingClient_1.ApexDebuggerEventType.RequestStarted:
            case streamingClient_1.ApexDebuggerEventType.Resumed:
            case streamingClient_1.ApexDebuggerEventType.SessionTerminated:
            case streamingClient_1.ApexDebuggerEventType.Stopped:
            case streamingClient_1.ApexDebuggerEventType.SystemGack:
            case streamingClient_1.ApexDebuggerEventType.SystemInfo:
            case streamingClient_1.ApexDebuggerEventType.SystemWarning: {
                return this.systemEventClient;
            }
        }
    }
    hasProcessedEvent(type, replayId) {
        const client = this.getClient(type);
        if (client && replayId > client.getReplayId()) {
            return false;
        }
        return true;
    }
    markEventProcessed(type, replayId) {
        const client = this.getClient(type);
        if (client) {
            client.setReplayId(replayId);
        }
    }
    subscribe(projectPath, requestService, systemEventClientInfo, userEventClientInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            const urlElements = [
                this.removeTrailingSlashURL(requestService.instanceUrl),
                'cometd',
                this.apiVersion
            ];
            const streamUrl = urlElements.join('/');
            this.systemEventClient = new streamingClient_1.StreamingClient(streamUrl, requestService, systemEventClientInfo);
            this.userEventClient = new streamingClient_1.StreamingClient(streamUrl, requestService, userEventClientInfo);
            yield this.systemEventClient.subscribe();
            yield this.userEventClient.subscribe();
            return Promise.resolve(this.isReady());
        });
    }
    removeTrailingSlashURL(instanceUrl) {
        return instanceUrl ? instanceUrl.replace(/\/+$/, '') : '';
    }
    disconnect() {
        if (this.systemEventClient) {
            this.systemEventClient.disconnect();
        }
        if (this.userEventClient) {
            this.userEventClient.disconnect();
        }
    }
    isReady() {
        if (this.systemEventClient &&
            this.systemEventClient.isConnected() &&
            this.userEventClient &&
            this.userEventClient.isConnected()) {
            return true;
        }
        return false;
    }
}
exports.StreamingService = StreamingService;
StreamingService.SYSTEM_EVENT_CHANNEL = '/systemTopic/ApexDebuggerSystemEvent';
StreamingService.USER_EVENT_CHANNEL = '/systemTopic/ApexDebuggerEvent';
StreamingService.DEFAULT_TIMEOUT = 14400;
//# sourceMappingURL=streamingService.js.map