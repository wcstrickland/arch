"use strict";
/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_1 = require("@salesforce/salesforcedx-utils-vscode/out/src/cli");
const types_1 = require("@salesforce/salesforcedx-utils-vscode/out/src/types");
class IsvContextUtil {
    setIsvDebuggerContext(projectWorkspacePath) {
        return __awaiter(this, void 0, void 0, function* () {
            let isvDebugProject = false;
            if (projectWorkspacePath) {
                const forceConfig = yield new cli_1.ForceConfigGet().getConfig(projectWorkspacePath, types_1.SFDX_CONFIG_ISV_DEBUGGER_SID, types_1.SFDX_CONFIG_ISV_DEBUGGER_URL);
                const isvDebuggerSid = forceConfig.get(types_1.SFDX_CONFIG_ISV_DEBUGGER_SID);
                const isvDebuggerUrl = forceConfig.get(types_1.SFDX_CONFIG_ISV_DEBUGGER_URL);
                if (typeof isvDebuggerSid !== 'undefined' &&
                    typeof isvDebuggerUrl !== 'undefined') {
                    // set auth context
                    cli_1.GlobalCliEnvironment.environmentVariables.set(types_1.ENV_SFDX_DEFAULTUSERNAME, isvDebuggerSid);
                    cli_1.GlobalCliEnvironment.environmentVariables.set(types_1.ENV_SFDX_INSTANCE_URL, isvDebuggerUrl);
                    isvDebugProject = true;
                }
            }
            return isvDebugProject;
        });
    }
    resetCliEnvironmentVars() {
        // reset any auth
        cli_1.GlobalCliEnvironment.environmentVariables.delete(types_1.ENV_SFDX_DEFAULTUSERNAME);
        cli_1.GlobalCliEnvironment.environmentVariables.delete(types_1.ENV_SFDX_INSTANCE_URL);
        console.log(`Deleted environment variables ${types_1.ENV_SFDX_DEFAULTUSERNAME} and ${types_1.ENV_SFDX_INSTANCE_URL}`);
    }
}
exports.IsvContextUtil = IsvContextUtil;
//# sourceMappingURL=isvContextUtil.js.map