import { RequestService } from '@salesforce/salesforcedx-utils-vscode/out/src/requestService';
export declare enum ApexDebuggerEventType {
    ApexException = 0,
    Debug = 1,
    HeartBeat = 2,
    LogLine = 3,
    OrgChange = 4,
    Ready = 5,
    RequestStarted = 6,
    RequestFinished = 7,
    Resumed = 8,
    SessionTerminated = 9,
    Stopped = 10,
    SystemInfo = 11,
    SystemGack = 12,
    SystemWarning = 13
}
export interface StreamingEvent {
    createdDate: string;
    replayId: number;
    type: string;
}
export interface ApexDebuggerEvent {
    SessionId: string;
    RequestId?: string;
    BreakpointId?: string;
    Type: string;
    Description?: string;
    FileName?: string;
    Line?: number;
    Stacktrace?: string;
}
export interface DebuggerMessage {
    event: StreamingEvent;
    sobject: ApexDebuggerEvent;
}
export declare class StreamingClientInfo {
    readonly channel: string;
    readonly timeout: number;
    readonly errorHandler: (reason: string) => void;
    readonly connectedHandler: () => void;
    readonly disconnectedHandler: () => void;
    readonly messageHandler: (message: any) => void;
    constructor(builder: StreamingClientInfoBuilder);
}
export declare class StreamingClientInfoBuilder {
    channel: string;
    timeout: number;
    errorHandler: (reason: string) => void;
    connectedHandler: () => void;
    disconnectedHandler: () => void;
    messageHandler: (message: any) => void;
    forChannel(channel: string): StreamingClientInfoBuilder;
    withTimeout(durationInSeconds: number): StreamingClientInfoBuilder;
    withErrorHandler(handler: (reason: string) => void): StreamingClientInfoBuilder;
    withConnectedHandler(handler: () => void): StreamingClientInfoBuilder;
    withDisconnectedHandler(handler: () => void): StreamingClientInfoBuilder;
    withMsgHandler(handler: (message: any) => void): StreamingClientInfoBuilder;
    build(): StreamingClientInfo;
}
export declare class StreamingClient {
    private client;
    private connected;
    private shouldDisconnect;
    private isReplaySupported;
    private replayId;
    private clientInfo;
    constructor(url: string, requestService: RequestService, clientInfo: StreamingClientInfo);
    subscribe(): Promise<void>;
    disconnect(): void;
    isConnected(): boolean;
    getReplayId(): number;
    setReplayId(replayId: number): void;
    getClientInfo(): StreamingClientInfo;
    private sendSubscribeRequest;
}
