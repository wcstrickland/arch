/// <reference types="node" />
import { RequestService } from '@salesforce/salesforcedx-utils-vscode/out/src/requestService';
import { Handles, LoggingDebugSession, Source, Variable } from 'vscode-debugadapter';
import { DebugProtocol } from 'vscode-debugprotocol';
import { ExceptionBreakpointInfo } from '../breakpoints/exceptionBreakpoint';
import { LineBreakpointInfo } from '../breakpoints/lineBreakpoint';
import { LocalValue, Reference, Tuple, Value } from '../commands';
import { BreakpointService, DebuggerMessage, SessionService, StreamingService } from '../core';
import { WorkspaceSettings } from '../index';
export declare type TraceCategory = 'all' | 'variables' | 'launch' | 'protocol' | 'breakpoints' | 'streaming';
export interface LaunchRequestArguments extends DebugProtocol.LaunchRequestArguments {
    trace?: boolean | string;
    userIdFilter?: string[];
    requestTypeFilter?: string[];
    entryPointFilter?: string;
    sfdxProject: string;
    connectType?: string;
    workspaceSettings: WorkspaceSettings;
    lineBreakpointInfo?: LineBreakpointInfo[];
}
export interface SetExceptionBreakpointsArguments {
    exceptionInfo: ExceptionBreakpointInfo;
}
export declare class ApexDebugStackFrameInfo {
    readonly requestId: string;
    readonly frameNumber: number;
    globals: Value[];
    statics: Value[];
    locals: LocalValue[];
    references: Reference[];
    constructor(requestId: string, frameNumber: number);
}
export declare enum ApexVariableKind {
    Global = 10,
    Static = 20,
    Local = 30,
    Field = 40,
    Collection = 50
}
export declare class ApexVariable extends Variable {
    readonly declaredTypeRef: string;
    readonly type: string;
    readonly indexedVariables?: number;
    readonly evaluateName: string;
    private readonly slot;
    private readonly kind;
    constructor(value: Value, kind: ApexVariableKind, variableReference?: number, numOfChildren?: number);
    static valueAsString(value: Value): string;
    static compareVariables(v1: ApexVariable, v2: ApexVariable): number;
    private static extractNumber;
    private static isLocalOrField;
    private static isString;
}
export declare type FilterType = 'named' | 'indexed' | 'all';
export interface VariableContainer {
    expand(session: ApexDebug, filter: FilterType, start?: number, count?: number): Promise<ApexVariable[]>;
    getNumberOfChildren(): number | undefined;
}
export declare type ScopeType = 'local' | 'static' | 'global';
export declare class ScopeContainer implements VariableContainer {
    private type;
    private frameInfo;
    constructor(type: ScopeType, frameInfo: ApexDebugStackFrameInfo);
    expand(session: ApexDebug, filter: FilterType, start?: number, count?: number): Promise<ApexVariable[]>;
    getNumberOfChildren(): number | undefined;
}
export declare class ObjectReferenceContainer implements VariableContainer {
    protected reference: Reference;
    protected requestId: string;
    readonly size: number | undefined;
    constructor(reference: Reference, requestId: string);
    expand(session: ApexDebug, filter: FilterType, start?: number, count?: number): Promise<ApexVariable[]>;
    getNumberOfChildren(): number | undefined;
}
export declare class CollectionReferenceContainer extends ObjectReferenceContainer {
    expand(session: ApexDebug, filter: FilterType, start?: number, count?: number): Promise<ApexVariable[]>;
}
export declare class MapReferenceContainer extends ObjectReferenceContainer {
    readonly tupleContainers: Map<number, MapTupleContainer>;
    addTupleContainer(reference: number, tupleContainer: MapTupleContainer): void;
    expand(session: ApexDebug, filter: FilterType, start?: number, count?: number): Promise<ApexVariable[]>;
}
export declare class MapTupleContainer implements VariableContainer {
    private tuple;
    private requestId;
    constructor(tuple: Tuple, requestId: string);
    keyAsString(): string;
    valueAsString(): string;
    expand(session: ApexDebug, filter: FilterType, start?: number, count?: number): Promise<ApexVariable[]>;
    getNumberOfChildren(): number | undefined;
}
export declare class ApexDebug extends LoggingDebugSession {
    protected myRequestService: RequestService;
    protected mySessionService: SessionService;
    protected myBreakpointService: BreakpointService;
    protected myStreamingService: StreamingService;
    protected sfdxProject: string;
    protected requestThreads: Map<number, string>;
    protected threadId: number;
    protected stackFrameInfos: Handles<ApexDebugStackFrameInfo>;
    protected variableHandles: Handles<VariableContainer>;
    protected variableContainerReferenceByApexId: Map<number, number>;
    private static LINEBREAK;
    private initializedResponse?;
    private trace;
    private traceAll;
    private lock;
    protected idleTimers: NodeJS.Timer[];
    constructor();
    protected initializeRequest(response: DebugProtocol.InitializeResponse, args: DebugProtocol.InitializeRequestArguments): void;
    protected attachRequest(response: DebugProtocol.AttachResponse, args: DebugProtocol.AttachRequestArguments): void;
    private getSessionIdleTimer;
    clearIdleTimers(): void;
    resetIdleTimer(): NodeJS.Timer[];
    protected launchRequest(response: DebugProtocol.LaunchResponse, args: LaunchRequestArguments): Promise<void>;
    private initBreakpointSessionServices;
    private setValidBreakpointLines;
    private setupLogger;
    protected disconnectRequest(response: DebugProtocol.DisconnectResponse, args: DebugProtocol.DisconnectArguments): Promise<void>;
    protected setBreakPointsRequest(response: DebugProtocol.SetBreakpointsResponse, args: DebugProtocol.SetBreakpointsArguments): Promise<void>;
    protected continueRequest(response: DebugProtocol.ContinueResponse, args: DebugProtocol.ContinueArguments): Promise<void>;
    protected nextRequest(response: DebugProtocol.NextResponse, args: DebugProtocol.NextArguments): Promise<void>;
    protected stepInRequest(response: DebugProtocol.StepInResponse, args: DebugProtocol.StepInArguments): Promise<void>;
    protected stepOutRequest(response: DebugProtocol.StepOutResponse, args: DebugProtocol.StepOutArguments): Promise<void>;
    protected threadsRequest(response: DebugProtocol.ThreadsResponse): void;
    protected stackTraceRequest(response: DebugProtocol.StackTraceResponse, args: DebugProtocol.StackTraceArguments): Promise<void>;
    private hasStackFrames;
    protected customRequest(command: string, response: DebugProtocol.Response, args: any): Promise<void>;
    protected scopesRequest(response: DebugProtocol.ScopesResponse, args: DebugProtocol.ScopesArguments): Promise<void>;
    protected variablesRequest(response: DebugProtocol.VariablesResponse, args: DebugProtocol.VariablesArguments): Promise<void>;
    fetchFrameVariables(frameInfo: ApexDebugStackFrameInfo): Promise<void>;
    protected populateReferences(references: Reference[], requestId: string): void;
    getNumberOfChildren(variableReference: number | undefined): number | undefined;
    resolveApexIdToVariableReference(requestId: string, apexId: number | undefined): Promise<number | undefined>;
    fetchReferences(requestId: string, ...apexIds: number[]): Promise<void>;
    fetchReferencesIfNecessary(requestId: string, apexIds: number[]): Promise<void>;
    protected evaluateRequest(response: DebugProtocol.EvaluateResponse, args: DebugProtocol.EvaluateArguments): void;
    protected printToDebugConsole(msg?: string, sourceFile?: Source, sourceLine?: number): void;
    protected warnToDebugConsole(msg?: string): void;
    protected errorToDebugConsole(msg?: string): void;
    log(traceCategory: TraceCategory, message: string): void;
    tryToParseSfdxError(response: DebugProtocol.Response, error?: any): void;
    connectStreaming(projectPath: string): Promise<boolean>;
    handleEvent(message: DebuggerMessage): void;
    logEvent(message: DebuggerMessage): void;
    private getThreadIdFromRequestId;
    private handleApexException;
    private handleDebug;
    private handleRequestFinished;
    private handleRequestStarted;
    private handleResumed;
    private handleSessionTerminated;
    private handleStopped;
    private handleSystemGack;
    private handleSystemInfo;
    private handleSystemWarning;
    toCommaSeparatedString(arg?: string[]): string;
}
