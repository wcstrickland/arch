import { RequestService } from '@salesforce/salesforcedx-utils-vscode/out/src/requestService';
import { ExceptionBreakpointInfo } from '../breakpoints/exceptionBreakpoint';
import { ApexBreakpointLocation, LineBreakpointsInTyperef } from '../breakpoints/lineBreakpoint';
export declare class BreakpointService {
    private lineNumberMapping;
    private typerefMapping;
    private lineBreakpointCache;
    private exceptionBreakpointCache;
    private readonly requestService;
    constructor(requestService: RequestService);
    setValidLines(lineNumberMapping: Map<string, LineBreakpointsInTyperef[]>, typerefMapping: Map<string, string>): void;
    hasLineNumberMapping(): boolean;
    isApexDebuggerBreakpointId(id: string): boolean;
    getTyperefFor(uri: string, line: number): string | undefined;
    getSourcePathFromTyperef(typeref: string): string | undefined;
    getSourcePathFromPartialTyperef(partialTyperef: string): string | undefined;
    cacheLineBreakpoint(uriArg: string, lineArg: number, breakpointIdArg: string): void;
    getLineBreakpointCache(): Map<string, ApexBreakpointLocation[]>;
    getExceptionBreakpointCache(): Map<string, string>;
    getBreakpointsFor(uri: string): Set<number>;
    createLineBreakpoint(projectPath: string, sessionId: string, typeref: string, line: number): Promise<string | undefined>;
    deleteBreakpoint(projectPath: string, breakpointId: string): Promise<string | undefined>;
    reconcileLineBreakpoints(projectPath: string, uri: string, sessionId: string, clientLines: number[]): Promise<Set<number>>;
    createExceptionBreakpoint(projectPath: string, sessionId: string, typeref: string): Promise<string | undefined>;
    reconcileExceptionBreakpoints(projectPath: string, sessionId: string, info: ExceptionBreakpointInfo): Promise<void>;
    clearSavedBreakpoints(): void;
}
