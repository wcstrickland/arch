import { ExtensionContext } from 'vscode';
import { TelemetryReporter } from './telemetryReporter';
export interface Measurements {
    [key: string]: number;
}
export interface Properties {
    [key: string]: string;
}
export interface TelemetryData {
    properties?: Properties;
    measurements?: Measurements;
}
export declare class TelemetryBuilder {
    private properties?;
    private measurements?;
    addProperty(key: string, value: string): void;
    addMeasurement(key: string, value: number): void;
    build(): TelemetryData;
}
export declare class TelemetryService {
    private static instance;
    private context;
    private reporter;
    private aiKey;
    private version;
    /**
     * Cached promise to check if CLI telemetry config is enabled
     */
    private cliAllowsTelemetryPromise?;
    extensionName: string;
    static getInstance(): TelemetryService;
    /**
     * Initialize Telemetry Service during extension activation.
     * @param context extension context
     * @param extensionName extension name
     */
    initializeService(context: ExtensionContext, extensionName: string, aiKey: string, version: string): Promise<void>;
    getReporter(): TelemetryReporter | undefined;
    isTelemetryEnabled(): Promise<boolean>;
    checkCliTelemetry(): Promise<boolean>;
    isTelemetryExtensionConfigurationEnabled(): boolean;
    setCliTelemetryEnabled(isEnabled: boolean): void;
    sendExtensionActivationEvent(hrstart: [number, number]): void;
    sendExtensionDeactivationEvent(): void;
    sendCommandEvent(commandName?: string, hrstart?: [number, number], properties?: Properties, measurements?: Measurements): void;
    sendException(name: string, message: string): void;
    sendEventData(eventName: string, properties?: {
        [key: string]: string;
    }, measures?: {
        [key: string]: number;
    }): void;
    dispose(): void;
    getEndHRTime(hrstart: [number, number]): number;
    /**
     * Helper to run a callback if telemetry has been initialized and is
     * enabled.
     *
     * @param callback function to call if telemetry is enabled
     */
    private validateTelemetry;
}
