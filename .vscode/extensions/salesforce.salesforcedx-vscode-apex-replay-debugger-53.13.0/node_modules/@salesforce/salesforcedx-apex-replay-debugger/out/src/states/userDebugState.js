"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = require("os");
const constants_1 = require("../constants");
class UserDebugState {
    constructor(fields) {
        this.line = parseInt(fields[2], 10);
        this.message = fields[fields.length - 1];
    }
    getMessage() {
        return this.message;
    }
    handle(logContext) {
        this.lookAheadAndAppend(logContext);
        const frame = logContext.getTopFrame();
        if (frame) {
            logContext
                .getSession()
                .warnToDebugConsole(this.message, frame.source, frame.name === constants_1.EXEC_ANON_SIGNATURE
                ? logContext.getExecAnonScriptLocationInDebugLog(this.line)
                : this.line);
        }
        return false;
    }
    lookAheadAndAppend(logContext) {
        for (let i = logContext.getLogLinePosition() + 1; i < logContext.getLogLines().length; i++) {
            // Get next log line as-is (no trimming)
            const nextLogLine = logContext.getLogLines()[i];
            // Check if this could be a debug log event
            if (nextLogLine.split('|').length >= 3) {
                break;
            }
            // If it's not a debug log event, assume it's in the user's
            this.message = `${this.message}${os_1.EOL}${nextLogLine}`;
            logContext.incrementLogLinePosition();
        }
    }
}
exports.UserDebugState = UserDebugState;
//# sourceMappingURL=userDebugState.js.map