import { StackFrame } from 'vscode-debugadapter';
import { ApexDebugStackFrameInfo, ApexReplayDebug, ApexVariableContainer, LaunchRequestArguments, VariableContainer } from '../adapter/apexReplayDebug';
import { DebugLogState } from '../states';
import { Handles } from './handles';
import { ApexHeapDump } from './heapDump';
import { LogContextUtil } from './logContextUtil';
export declare class LogContext {
    private readonly util;
    private readonly session;
    private readonly launchArgs;
    private readonly logLines;
    private readonly logSize;
    private state;
    private frameHandles;
    private staticVariablesClassMap;
    private refsMap;
    private variableHandles;
    private stackFrameInfos;
    private logLinePosition;
    private execAnonMapping;
    private apexHeapDumps;
    private lastSeenHeapDumpClass;
    private lastSeenHeapDumpLine;
    private backupStackFrameInfos;
    private backupFrameHandles;
    private backupRefsMap;
    private backupStaticVariablesClassMap;
    private backupVariableHandles;
    constructor(launchArgs: LaunchRequestArguments, session: ApexReplayDebug);
    getUtil(): LogContextUtil;
    getLaunchArgs(): LaunchRequestArguments;
    getSession(): ApexReplayDebug;
    getLogLines(): string[];
    getLogSize(): number;
    hasLogLines(): boolean;
    meetsLogLevelRequirements(): boolean;
    getHeapDumps(): ApexHeapDump[];
    hasHeapDump(): boolean;
    getHeapDumpForThisLocation(frameName: string, lineNumber: number): ApexHeapDump | undefined;
    hasHeapDumpForTopFrame(): string | undefined;
    resetLastSeenHeapDumpLogLine(): void;
    isRunningApexTrigger(): boolean;
    copyStateForHeapDump(): void;
    private copyVariableContainers;
    private cloneStaticVariablesClassMap;
    revertStateAfterHeapDump(): void;
    scanLogForHeapDumpLines(): boolean;
    fetchOverlayResultsForApexHeapDumps(projectPath: string): Promise<boolean>;
    getLogFileName(): string;
    getLogFilePath(): string;
    getLogLinePosition(): number;
    incrementLogLinePosition(): void;
    getFrames(): StackFrame[];
    getNumOfFrames(): number;
    getTopFrame(): StackFrame | undefined;
    getRefsMap(): Map<string, ApexVariableContainer>;
    getStaticVariablesClassMap(): Map<string, Map<string, VariableContainer>>;
    getFrameHandler(): Handles<ApexDebugStackFrameInfo>;
    getVariableHandler(): Handles<VariableContainer>;
    setState(state: DebugLogState | undefined): void;
    hasState(): boolean;
    getExecAnonScriptLocationInDebugLog(scriptLine: number): number;
    getExecAnonScriptMapping(): Map<number, number>;
    getUriFromSignature(signature: string): string;
    hasFrames(): boolean;
    updateFrames(): void;
    parseLogEvent(logLine: string): DebugLogState;
}
