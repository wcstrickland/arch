"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const apexReplayDebug_1 = require("../adapter/apexReplayDebug");
class VariableBeginState {
    constructor(fields) {
        this.fields = fields;
    }
    handle(logContext) {
        const currFrame = logContext.getTopFrame();
        if (currFrame) {
            const id = currFrame.id;
            const frameInfo = logContext.getFrameHandler().get(id);
            const name = this.fields[3];
            const type = this.fields[4];
            const isStatic = this.fields[6] === 'true';
            const className = logContext.getUtil().substringUpToLastPeriod(name);
            if (className &&
                !logContext.getStaticVariablesClassMap().has(className)) {
                logContext
                    .getStaticVariablesClassMap()
                    .set(className, new Map());
            }
            const statics = logContext.getStaticVariablesClassMap().get(className);
            if (isStatic) {
                // will need to use the last index in case of something like OuterClass.InnerClass.method()
                const varName = logContext.getUtil().substringFromLastPeriod(name);
                statics.set(varName, new apexReplayDebug_1.ApexVariableContainer(varName, 'null', type));
            }
            else {
                // had to add this check because triggers will have variable assignments show up twice and break this
                if (!frameInfo.locals.has(name)) {
                    frameInfo.locals.set(name, new apexReplayDebug_1.ApexVariableContainer(name, 'null', type));
                }
            }
        }
        return false;
    }
}
exports.VariableBeginState = VariableBeginState;
//# sourceMappingURL=variableBeginState.js.map