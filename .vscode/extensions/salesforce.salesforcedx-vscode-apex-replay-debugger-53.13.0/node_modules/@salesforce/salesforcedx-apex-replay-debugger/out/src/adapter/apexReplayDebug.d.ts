import { LoggingDebugSession, Source, Variable } from 'vscode-debugadapter';
import { DebugProtocol } from 'vscode-debugprotocol';
import { LineBreakpointInfo } from '../breakpoints';
import { HeapDumpService } from '../core/heapDumpService';
import { LogContext } from '../core/logContext';
export declare type TraceCategory = 'all' | 'protocol' | 'logfile' | 'launch' | 'breakpoints';
export declare enum Step {
    Over = 0,
    In = 1,
    Out = 2,
    Run = 3
}
export interface LaunchRequestArguments extends DebugProtocol.LaunchRequestArguments {
    logFile: string;
    stopOnEntry?: boolean | true;
    trace?: boolean | string;
    lineBreakpointInfo?: LineBreakpointInfo[];
    projectPath: string | undefined;
}
export declare class ApexVariable extends Variable {
    readonly type: string;
    readonly apexRef: string | undefined;
    readonly evaluateName: string;
    constructor(name: string, value: string, type: string, ref?: number, apexRef?: string);
}
export declare class ApexDebugStackFrameInfo {
    readonly frameNumber: number;
    readonly signature: string;
    statics: Map<string, VariableContainer>;
    locals: Map<string, VariableContainer>;
    globals: Map<string, VariableContainer>;
    constructor(frameNumber: number, signature: string);
    copy(): ApexDebugStackFrameInfo;
}
export declare enum SCOPE_TYPES {
    LOCAL = "local",
    STATIC = "static",
    GLOBAL = "global"
}
export declare abstract class VariableContainer {
    variables: Map<string, VariableContainer>;
    constructor(variables?: Map<string, VariableContainer>);
    getAllVariables(): ApexVariable[];
    copy(): VariableContainer;
}
export declare class ApexVariableContainer extends VariableContainer {
    name: string;
    value: string;
    type: string;
    ref: string | undefined;
    variablesRef: number;
    constructor(name: string, value: string, type: string, ref?: string, variablesRef?: number);
    copy(): ApexVariableContainer;
}
export declare class ScopeContainer extends VariableContainer {
    readonly type: SCOPE_TYPES;
    constructor(type: SCOPE_TYPES, variables: Map<string, VariableContainer>);
    getAllVariables(): ApexVariable[];
}
export declare class ApexReplayDebug extends LoggingDebugSession {
    static THREAD_ID: number;
    protected logContext: LogContext;
    protected heapDumpService: HeapDumpService;
    protected trace: string[];
    protected traceAll: boolean;
    private initializedResponse;
    protected breakpoints: Map<string, number[]>;
    protected projectPath: string | undefined;
    constructor();
    initializeRequest(response: DebugProtocol.InitializeResponse, args: DebugProtocol.InitializeRequestArguments): void;
    launchRequest(response: DebugProtocol.LaunchResponse, args: LaunchRequestArguments): Promise<void>;
    setupLogger(args: LaunchRequestArguments): void;
    configurationDoneRequest(response: DebugProtocol.ConfigurationDoneResponse, args: DebugProtocol.ConfigurationDoneArguments): void;
    disconnectRequest(response: DebugProtocol.DisconnectResponse, args: DebugProtocol.DisconnectArguments): void;
    threadsRequest(response: DebugProtocol.ThreadsResponse): void;
    stackTraceRequest(response: DebugProtocol.StackTraceResponse, args: DebugProtocol.StackTraceArguments): void;
    scopesRequest(response: DebugProtocol.ScopesResponse, args: DebugProtocol.ScopesArguments): Promise<void>;
    variablesRequest(response: DebugProtocol.VariablesResponse, args: DebugProtocol.VariablesArguments): Promise<void>;
    protected evaluateRequest(response: DebugProtocol.EvaluateResponse, args: DebugProtocol.EvaluateArguments): void;
    continueRequest(response: DebugProtocol.ContinueResponse, args: DebugProtocol.ContinueArguments): void;
    nextRequest(response: DebugProtocol.NextResponse, args: DebugProtocol.NextArguments): void;
    stepInRequest(response: DebugProtocol.StepInResponse, args: DebugProtocol.StepInArguments): void;
    stepOutRequest(response: DebugProtocol.StepOutResponse, args: DebugProtocol.StepOutArguments): void;
    protected executeStep(response: DebugProtocol.Response, stepType: Step): void;
    protected shouldStopForBreakpoint(): boolean;
    setBreakPointsRequest(response: DebugProtocol.SetBreakpointsResponse, args: DebugProtocol.SetBreakpointsArguments): void;
    log(traceCategory: TraceCategory, message: string): void;
    shouldTraceLogFile(): boolean;
    printToDebugConsole(msg: string, sourceFile?: Source, sourceLine?: number, category?: string): void;
    warnToDebugConsole(msg: string, sourceFile?: Source, sourceLine?: number): void;
    errorToDebugConsole(msg: string, sourceFile?: Source, sourceLine?: number): void;
}
