"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TapReporter {
    format(testResult, epilog) {
        var _a;
        const results = this.buildTapResults(testResult);
        const testPointCount = results.length;
        let out = '';
        out = out.concat(`1..${testPointCount}\n`);
        results.forEach(testPoint => {
            out = out.concat(`${testPoint.outcome} ${testPoint.testNumber} ${testPoint.description}\n`);
            testPoint.diagnostics.forEach(s => {
                out = out.concat(`# ${s}\n`);
            });
        });
        (_a = epilog) === null || _a === void 0 ? void 0 : _a.forEach(c => {
            out = out.concat(`# ${c}\n`);
        });
        return out;
    }
    buildTapResults(testResult) {
        const tapResults = [];
        testResult.tests.forEach((test, index) => {
            const testNumber = index + 1;
            const outcome = test.outcome === "Pass" /* Pass */ ? 'ok' : 'not ok';
            tapResults.push({
                testNumber,
                description: test.fullName,
                diagnostics: this.buildTapDiagnostics(test),
                outcome
            });
        });
        return tapResults;
    }
    buildTapDiagnostics(testResult) {
        const message = [];
        if (testResult.outcome !== 'Pass') {
            if (testResult.message) {
                const startsWithNewlineRegex = new RegExp(/^[/\r\n|\r|\n][\w]*/gim);
                if (startsWithNewlineRegex.test(testResult.message)) {
                    testResult.message.split(/\r\n|\r|\n/g).forEach(msg => {
                        if (msg && msg.length > 0) {
                            message.push(msg.trim());
                        }
                    });
                }
                else {
                    message.push(testResult.message);
                }
            }
            else {
                message.push('Unknown error');
            }
            if (testResult.stackTrace) {
                testResult.stackTrace.split('\n').forEach(line => {
                    message.push(line);
                });
            }
        }
        return message;
    }
}
exports.TapReporter = TapReporter;
//# sourceMappingURL=tapReporter.js.map