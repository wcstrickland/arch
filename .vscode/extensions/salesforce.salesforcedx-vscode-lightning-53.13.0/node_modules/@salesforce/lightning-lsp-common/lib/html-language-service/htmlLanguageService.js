/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
'use strict';
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const htmlScanner_1 = require("./parser/htmlScanner");
const htmlParser_1 = require("./parser/htmlParser");
const htmlCompletion_1 = require("./services/htmlCompletion");
const tagProviders_1 = require("./services/tagProviders");
const htmlHover_1 = require("./services/htmlHover");
const htmlFormatter_1 = require("./services/htmlFormatter");
const htmlLinks_1 = require("./services/htmlLinks");
const htmlHighlighting_1 = require("./services/htmlHighlighting");
const htmlSymbolsProvider_1 = require("./services/htmlSymbolsProvider");
const htmlDefinition_1 = require("./services/htmlDefinition");
const lwcExtensions_1 = require("./services/lwcExtensions");
const auraExtensions_1 = require("./services/auraExtensions");
const htmlFolding_1 = require("./services/htmlFolding");
__export(require("./htmlLanguageTypes"));
__export(require("vscode-languageserver-types"));
function getLanguageService() {
    const htmlCompletion = new htmlCompletion_1.HTMLCompletion();
    return {
        createScanner: htmlScanner_1.createScanner,
        addTagProvider: tagProviders_1.addTagProvider,
        getTagProviders: tagProviders_1.getTagProviders,
        parseHTMLDocument: document => htmlParser_1.parse(document.getText()),
        doComplete: htmlCompletion.doComplete.bind(htmlCompletion),
        setCompletionParticipants: htmlCompletion.setCompletionParticipants.bind(htmlCompletion),
        doHover: htmlHover_1.doHover,
        format: htmlFormatter_1.format,
        findDocumentHighlights: htmlHighlighting_1.findDocumentHighlights,
        findDocumentLinks: htmlLinks_1.findDocumentLinks,
        findDocumentSymbols: htmlSymbolsProvider_1.findDocumentSymbols,
        getFoldingRanges: htmlFolding_1.getFoldingRanges,
        doTagComplete: htmlCompletion.doTagComplete.bind(htmlCompletion),
        findDefinition: htmlDefinition_1.findDefinition,
        getPropertyBindingTemplateDeclaration: lwcExtensions_1.getPropertyBindingTemplateDeclaration,
        getPropertyBindingValue: lwcExtensions_1.getPropertyBindingValue,
        getAuraBindingTemplateDeclaration: auraExtensions_1.getAuraBindingTemplateDeclaration,
        getAuraBindingValue: auraExtensions_1.getAuraBindingValue,
    };
}
exports.getLanguageService = getLanguageService;
//# sourceMappingURL=htmlLanguageService.js.map