/*!
BEGIN THIRD PARTY
*/
import { TagInfo } from '../../indexer/tagInfo';
import { AttributeInfo } from '../../indexer/attributeInfo';
export declare const EMPTY_ELEMENTS: string[];
export declare function isEmptyElement(e: string): boolean;
export interface IHTMLTagProvider {
    getId(): string;
    isApplicable(languageId: string): boolean;
    collectTags(collector: (tag: string, label: string, info: TagInfo) => void): void;
    collectAttributes(tag: string, collector: (attribute: string, info: AttributeInfo, type?: string) => void): void;
    collectValues(tag: string, attribute: string, collector: (value: string) => void): void;
    getTagInfo(tag: string): TagInfo;
    getGlobalAttributes(): AttributeInfo[];
    collectExpressionValues(templateTag: string, collector: (value: string) => void): void;
}
export interface ITagSet {
    [tag: string]: HTMLTagSpecification;
}
export declare class HTMLTagSpecification {
    label: string;
    attributes: string[];
    constructor(label: string, attributes?: string[]);
}
/*!
END THIRD PARTY
*/
//# sourceMappingURL=htmlTags.d.ts.map