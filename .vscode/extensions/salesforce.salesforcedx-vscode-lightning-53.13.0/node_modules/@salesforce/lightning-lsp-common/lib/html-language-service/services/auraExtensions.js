'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const htmlScanner_1 = require("../parser/htmlScanner");
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const htmlLanguageTypes_1 = require("../htmlLanguageTypes");
const utils_1 = require("./utils");
const TOP_OF_FILE = vscode_languageserver_types_1.Range.create(vscode_languageserver_types_1.Position.create(0, 0), vscode_languageserver_types_1.Position.create(0, 0));
function findAuraDeclaration(document, attributeValue, htmlDocument) {
    for (const root of htmlDocument.roots) {
        const attributes = root.children.filter(n => n.tag === 'aura:attribute');
        for (const attribute of attributes) {
            const attrs = attribute.attributes || {};
            if (utils_1.stripQuotes(attrs.name) === attributeValue) {
                const range = utils_1.getAttributeRange(document, 'name', attribute.start, attribute.end);
                if (range) {
                    return {
                        uri: document.uri,
                        range,
                    };
                }
            }
        }
    }
    return null;
}
/**
 * Looks for property bindings {PROPERTY.something} within attribute values, or body content, and returns a location
 * within the same template that corresponds to iterator:PROPERTY or for:item="PROPERTY".
 */
function getAuraBindingTemplateDeclaration(document, position, htmlDocument) {
    const offset = document.offsetAt(position);
    const node = htmlDocument.findNodeAt(offset);
    if (!node || !node.tag) {
        return null;
    }
    let propertyValue = getAuraBindingValue(document, position, htmlDocument);
    if (propertyValue) {
        return findAuraDeclaration(document, propertyValue, htmlDocument);
    }
    return null;
}
exports.getAuraBindingTemplateDeclaration = getAuraBindingTemplateDeclaration;
/**
 * Parses attribute value or body text content looking for the active {PROPERTY.something} reference corresponding
 * to the position. It will only return the leading property name. i.e. PROPERTY
 */
function getAuraBindingValue(document, position, htmlDocument) {
    const offset = document.offsetAt(position);
    const node = htmlDocument.findNodeAt(offset);
    if (!node || !node.tag) {
        return null;
    }
    // first look through attribute values
    const attributeRange = utils_1.getTagNameRange(document, offset, htmlLanguageTypes_1.TokenType.AttributeValue, node.start);
    if (attributeRange) {
        const value = document.getText(attributeRange);
        const valueRelativeOffset = offset - document.offsetAt(attributeRange.start);
        const dotIndex = value.indexOf('.');
        // make sure our position is AFTER the first dot before matching...
        if (dotIndex != -1 && valueRelativeOffset < dotIndex) {
            // we're after the first dot, bail
            return null;
        }
        const valueTrimmed = value.trim();
        const valuePattern = /['"]?\s*{[!#]\s*[!]?[vmc]\.(\w*)(\.?\w*)*\s*}\s*['"]?/g;
        const match = valuePattern.exec(valueTrimmed);
        if (match) {
            const property = match[1];
            return property;
        }
    }
    // try looking through body text...
    if (!attributeRange) {
        const scanner = htmlScanner_1.createScanner(document.getText(), node.start);
        let token = scanner.scan();
        while (token !== htmlLanguageTypes_1.TokenType.EOS && scanner.getTokenEnd() <= node.end) {
            if (token === htmlLanguageTypes_1.TokenType.Content) {
                const range = {
                    start: document.positionAt(scanner.getTokenOffset()),
                    end: document.positionAt(scanner.getTokenEnd()),
                };
                const curContent = document.getText(range);
                const relativeOffset = offset - scanner.getTokenOffset();
                var match;
                const valuePattern = /['"]?\s*{[!#]\s*[!]?[vmc]\.(\w*)(\.?\w*)*\s*}\s*['"]?/g;
                while ((match = valuePattern.exec(curContent))) {
                    const start = valuePattern.lastIndex - match[0].length;
                    const end = valuePattern.lastIndex - 1;
                    if (start <= relativeOffset && relativeOffset <= end) {
                        // this just gives us the match within the full regular expression match
                        // we want to make sure we're only on the left most property following
                        // the m, c, v character.
                        const dotIndex = curContent.indexOf('.', start);
                        if (dotIndex != -1) {
                            const nextDotIndex = curContent.indexOf('.', dotIndex + 1);
                            if (nextDotIndex != -1) {
                                if (relativeOffset > dotIndex && relativeOffset < nextDotIndex) {
                                    return match[1];
                                }
                            }
                            else {
                                if (relativeOffset > dotIndex) {
                                    return match[1];
                                }
                            }
                        }
                        else {
                            return match[1];
                        }
                        if (dotIndex == -1) {
                            return match[1];
                        }
                    }
                }
            }
            token = scanner.scan();
        }
    }
    return null;
}
exports.getAuraBindingValue = getAuraBindingValue;
//# sourceMappingURL=auraExtensions.js.map