import { TextDocument } from 'vscode-languageserver';
import { WorkspaceType } from './shared';
export interface SfdxPackageDirectoryConfig {
    path: string;
}
export interface SfdxProjectConfig {
    packageDirectories: SfdxPackageDirectoryConfig[];
    sfdxPackageDirsPattern: string;
}
export interface Indexer {
    configureAndIndex(): Promise<void>;
    resetIndex(): void;
}
/**
 * Holds information and utility methods for a LWC workspace
 */
export declare class WorkspaceContext {
    type: WorkspaceType;
    workspaceRoots: string[];
    indexers: Map<string, Indexer>;
    private findNamespaceRootsUsingTypeCache;
    private initSfdxProjectConfigCache;
    private AURA_EXTENSIONS;
    /**
     * @param workspaceRoots
     * @return WorkspaceContext representing the workspace with workspaceRoots
     */
    constructor(workspaceRoots: string[] | string);
    getNamespaceRoots(): Promise<{
        lwc: string[];
        aura: string[];
    }>;
    getSfdxProjectConfig(): Promise<SfdxProjectConfig>;
    addIndexingProvider(provider: {
        name: string;
        indexer: Indexer;
    }): void;
    getIndexingProvider(name: string): Indexer;
    /**
     * @return all the .js module files in the workspace
     */
    findAllModules(): Promise<string[]>;
    findAllAuraMarkup(): Promise<string[]>;
    isAuraMarkup(document: TextDocument): Promise<boolean>;
    isAuraJavascript(document: TextDocument): Promise<boolean>;
    isLWCTemplate(document: TextDocument): Promise<boolean>;
    isLWCJavascript(document: TextDocument): Promise<boolean>;
    isInsideAuraRoots(document: TextDocument): Promise<boolean>;
    isInsideModulesRoots(document: TextDocument): Promise<boolean>;
    isFileInsideModulesRoots(file: string): Promise<boolean>;
    isFileInsideAuraRoots(file: string): Promise<boolean>;
    /**
     * Configures a LWC project
     */
    configureProject(): Promise<void>;
    /**
     * Acquires list of absolute modules directories, optimizing for workspace type
     * @returns Promise
     */
    getModulesDirs(): Promise<string[]>;
    private initSfdxProject;
    private writeTypings;
    /**
     * Writes to and updates Jsconfig files and ES Lint files of WorkspaceRoots, optimizing by type
     */
    private writeJsconfigJson;
    private writeSettings;
    private updateCoreSettings;
    private updateCoreCodeWorkspace;
    private readConfigBlt;
    private processTemplate;
    /**
     * Adds to the config file in absolute 'configPath' any missing properties in 'config'
     * (existing properties are not updated)
     */
    private updateConfigFile;
    private updateForceIgnoreFile;
    /**
     * @returns string list of all lwc and aura namespace roots
     */
    private findNamespaceRootsUsingType;
}
//# sourceMappingURL=context.d.ts.map