import * as vscode from 'vscode';
import { Command, CommandExecution } from '../cli';
import { Measurements, Properties, TelemetryBuilder, TelemetryData } from '../index';
import { CommandletExecutor, ContinueResponse } from '../types';
export declare abstract class SfdxCommandletExecutor<T> implements CommandletExecutor<T> {
    private outputChannel?;
    protected showChannelOutput: boolean;
    protected executionCwd: string;
    protected onDidFinishExecutionEventEmitter: vscode.EventEmitter<[number, number]>;
    readonly onDidFinishExecution: vscode.Event<[number, number]>;
    constructor(outputChannel?: vscode.OutputChannel);
    protected attachExecution(execution: CommandExecution, cancellationTokenSource: vscode.CancellationTokenSource, cancellationToken: vscode.CancellationToken): void;
    logMetric(logName: string | undefined, hrstart: [number, number], properties?: Properties, measurements?: Measurements): void;
    execute(response: ContinueResponse<T>): void;
    protected getTelemetryData(success: boolean, response: ContinueResponse<T>, output: string): TelemetryData | undefined;
    abstract build(data: T): Command;
}
export declare abstract class LibraryCommandletExecutor<T> implements CommandletExecutor<T> {
    protected cancellable: boolean;
    private cancelled;
    private readonly executionName;
    private readonly logName;
    private readonly outputChannel;
    protected showChannelOutput: boolean;
    protected readonly telemetry: TelemetryBuilder;
    /**
     * @param name Name visible to user while executing.
     * @param logName Name for logging purposes such as telemetry.
     * @param outputChannel VS Code output channel to report execution status to.
     */
    constructor(executionName: string, logName: string, outputChannel: vscode.OutputChannel);
    /**
     * Core logic of the command.
     *
     * @param response Data from the parameter gathering step.
     * @returns Whether or not the execution was a success
     */
    abstract run(response: ContinueResponse<T>, progress?: vscode.Progress<{
        message?: string | undefined;
        increment?: number | undefined;
    }>, token?: vscode.CancellationToken): Promise<boolean>;
    execute(response: ContinueResponse<T>): Promise<void>;
    get telemetryData(): TelemetryData;
}
