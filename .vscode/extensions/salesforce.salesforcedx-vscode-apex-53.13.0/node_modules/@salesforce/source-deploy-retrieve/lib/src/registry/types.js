"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransformerStrategy = exports.RecompositionStrategy = exports.DecompositionStrategy = void 0;
/**
 * Strategy names for handling component decomposition.
 */
var DecompositionStrategy;
(function (DecompositionStrategy) {
    /**
     * Elements of child types are decomposed to the same folder the parent object is in.
     */
    DecompositionStrategy["TopLevel"] = "topLevel";
    /**
     * Elements of child types are decomposed into folders of their respective types.
     */
    DecompositionStrategy["FolderPerType"] = "folderPerType";
})(DecompositionStrategy = exports.DecompositionStrategy || (exports.DecompositionStrategy = {}));
/**
 * Strategy names for handling component recomposition.
 */
var RecompositionStrategy;
(function (RecompositionStrategy) {
    /**
     * The parent object should start as an empty object when recomposing the child types
     */
    RecompositionStrategy["StartEmpty"] = "startEmpty";
})(RecompositionStrategy = exports.RecompositionStrategy || (exports.RecompositionStrategy = {}));
/**
 * Strategy names for the type of transformation to use for metadata types.
 */
var TransformerStrategy;
(function (TransformerStrategy) {
    TransformerStrategy["Standard"] = "standard";
    TransformerStrategy["Decomposed"] = "decomposed";
    TransformerStrategy["StaticResource"] = "staticResource";
    TransformerStrategy["NonDecomposed"] = "nonDecomposed";
})(TransformerStrategy = exports.TransformerStrategy || (exports.TransformerStrategy = {}));
//# sourceMappingURL=types.js.map