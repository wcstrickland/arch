"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasUnsupportedFeatures = exports.metadataTypes = exports.settings = exports.features = void 0;
/**
 * when checking for completeness or building registries
 * this is the list of features that are not available,
 * typically because the devhub doesn't support them, so we can't use metadataDescribe
 *
 * */
exports.features = [
    'SUSTAINABILITYAPP',
    'SERVICECATALOG',
];
exports.settings = [
    'botSettings',
];
exports.metadataTypes = [
    'EmailTemplateFolder',
    // things that don't show up in describe so far
    'PicklistValue',
    'FieldRestrictionRule',
    'AppointmentSchedulingPolicy',
    'AppointmentAssignmentPolicy',
    'WorkflowFlowAction',
    'AdvAcctForecastDimSource',
    'CareLimitType',
    'RelatedRecordAssocCriteria',
    'OmniInteractionAccessConfig',
    // two children of GlobalValueSet
    'CustomValue',
    'StandardValue',
];
exports.hasUnsupportedFeatures = (type) => {
    var _a;
    if (!((_a = type.scratchDefinitions) === null || _a === void 0 ? void 0 : _a.developer)) {
        return true;
    }
    const scratchDef = JSON.parse(type.scratchDefinitions.developer);
    if (scratchDef.features &&
        scratchDef.features.length > 0 &&
        exports.features.some((feature) => scratchDef.features.includes(feature))) {
        return true;
    }
    if (scratchDef.settings && exports.settings.some((setting) => scratchDef.settings[setting])) {
        return true;
    }
    return false;
};
//# sourceMappingURL=nonSupportedTypes.js.map