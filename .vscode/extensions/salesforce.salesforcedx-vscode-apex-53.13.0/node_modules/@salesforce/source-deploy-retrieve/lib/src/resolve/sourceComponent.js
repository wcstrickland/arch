"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceComponent = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path_1 = require("path");
const fast_xml_parser_1 = require("fast-xml-parser");
const forceIgnore_1 = require("./forceIgnore");
const treeContainers_1 = require("./treeContainers");
const utils_1 = require("../utils");
const common_1 = require("../common");
const ts_types_1 = require("@salesforce/ts-types");
const errors_1 = require("../errors");
const collections_1 = require("../collections");
/**
 * Representation of a MetadataComponent in a file tree.
 */
class SourceComponent {
    constructor(props, tree = new treeContainers_1.NodeFSTreeContainer(), forceIgnore = new forceIgnore_1.ForceIgnore()) {
        this.markedForDelete = false;
        this.name = props.name;
        this.type = props.type;
        this.xml = props.xml;
        this.parent = props.parent;
        this.content = props.content;
        this.parentType = props.parentType;
        this._tree = tree;
        this.forceIgnore = forceIgnore;
    }
    static createVirtualComponent(props, fs, forceIgnore) {
        const tree = new treeContainers_1.VirtualTreeContainer(fs);
        return new SourceComponent(props, tree, forceIgnore);
    }
    walkContent() {
        const sources = [];
        if (this.content) {
            for (const fsPath of this.walk(this.content)) {
                if (fsPath !== this.xml) {
                    sources.push(fsPath);
                }
            }
        }
        return sources;
    }
    /**
     * returns the children of a parent SourceComponent
     *
     * Ensures that the children of SourceComponent are valid child types.
     * Invalid child types can occur when projects are structured in an atypical way such as having
     * ApexClasses or Layouts within a CustomObject folder.
     *
     * @return SourceComponent[] containing valid children
     */
    getChildren() {
        var _a, _b, _c, _d;
        if (!this.parent && this.type.children) {
            const children = this.content
                ? this.getDecomposedChildren(this.content)
                : this.getNonDecomposedChildren();
            const validChildTypes = ((_a = this.type) === null || _a === void 0 ? void 0 : _a.children) ? Object.keys((_c = (_b = this.type) === null || _b === void 0 ? void 0 : _b.children) === null || _c === void 0 ? void 0 : _c.types) : [];
            for (const child of children) {
                // Ensure only valid child types are included with the parent.
                if (!validChildTypes.includes((_d = child.type) === null || _d === void 0 ? void 0 : _d.id)) {
                    const filePath = child.xml || child.content;
                    throw new errors_1.TypeInferenceError('error_unexpected_child_type', [filePath, this.type.name]);
                }
            }
            return children;
        }
        return [];
    }
    parseXml(xmlFilePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const xml = xmlFilePath !== null && xmlFilePath !== void 0 ? xmlFilePath : this.xml;
            if (xml) {
                const contents = yield this.tree.readFile(xml);
                return this.parse(contents.toString());
            }
            return {};
        });
    }
    parseXmlSync(xmlFilePath) {
        const xml = xmlFilePath !== null && xmlFilePath !== void 0 ? xmlFilePath : this.xml;
        if (xml) {
            const contents = this.tree.readFileSync(xml);
            return this.parse(contents.toString());
        }
        return {};
    }
    /**
     * As a performance enhancement, use the already parsed parent xml source
     * to return the child section of xml source. This is useful for non-decomposed
     * transformers where all child source components reference the parent's
     * xml file to prevent re-reading the same file multiple times.
     *
     * @param parentXml parsed parent XMl source as an object
     * @returns child section of the parent's xml
     */
    parseFromParentXml(parentXml) {
        if (!this.parent) {
            return parentXml;
        }
        const children = utils_1.normalizeToArray(ts_types_1.get(parentXml, `${this.parent.type.name}.${this.type.xmlElementName || this.type.directoryName}`));
        return children.find((c) => ts_types_1.getString(c, this.type.uniqueIdElement) === this.name);
    }
    getPackageRelativePath(fsPath, format) {
        return format === 'source'
            ? path_1.join(common_1.DEFAULT_PACKAGE_ROOT_SFDX, this.calculateRelativePath(fsPath))
            : this.calculateRelativePath(fsPath);
    }
    /**
     * @returns whether this component should be part of destructive changes.
     */
    isMarkedForDelete() {
        return this.markedForDelete;
    }
    getDestructiveChangesType() {
        return this.destructiveChangesType;
    }
    setMarkedForDelete(destructiveChangeType) {
        if (destructiveChangeType === false) {
            this.markedForDelete = false;
            // unset destructiveChangesType if it was already set
            delete this.destructiveChangesType;
        }
        else {
            this.markedForDelete = true;
            destructiveChangeType === collections_1.DestructiveChangesType.PRE
                ? (this.destructiveChangesType = collections_1.DestructiveChangesType.PRE)
                : (this.destructiveChangesType = collections_1.DestructiveChangesType.POST);
        }
    }
    calculateRelativePath(fsPath) {
        var _a, _b;
        const { directoryName, suffix, inFolder, folderType, folderContentType } = this.type;
        // if there isn't a suffix, assume this is a mixed content component that must
        // reside in the directoryName of its type. trimUntil maintains the folder structure
        // the file resides in for the new destination. This also applies to inFolder types:
        // (report, dashboard, emailTemplate, document) and their folder container types:
        // (reportFolder, dashboardFolder, emailFolder, documentFolder)
        if (!suffix || inFolder || folderContentType) {
            return utils_1.trimUntil(fsPath, directoryName);
        }
        if (folderType) {
            // types like Territory2Model have child types inside them.  We have to preserve those folder structures
            if (((_a = this.parentType) === null || _a === void 0 ? void 0 : _a.folderType) && ((_b = this.parentType) === null || _b === void 0 ? void 0 : _b.folderType) !== this.type.id) {
                return utils_1.trimUntil(fsPath, this.parentType.directoryName);
            }
            return path_1.join(directoryName, this.fullName.split('/')[0], path_1.basename(fsPath));
        }
        return path_1.join(directoryName, path_1.basename(fsPath));
    }
    parse(contents) {
        // include tag attributes and don't parse text node as number
        const parsed = fast_xml_parser_1.parse(contents.toString(), {
            ignoreAttributes: false,
            parseNodeValue: false,
        });
        const [firstElement] = Object.keys(parsed);
        if (firstElement === this.type.name) {
            return parsed;
        }
        else if (this.parent) {
            return this.parseFromParentXml(parsed);
        }
        else {
            return parsed;
        }
    }
    getDecomposedChildren(dirPath) {
        const children = [];
        for (const fsPath of this.walk(dirPath)) {
            const childXml = utils_1.parseMetadataXml(fsPath);
            const fileIsRootXml = (childXml === null || childXml === void 0 ? void 0 : childXml.suffix) === this.type.suffix;
            if (childXml && !fileIsRootXml) {
                // TODO: Log warning if missing child type definition
                const childTypeId = this.type.children.suffixes[childXml.suffix];
                const childComponent = new SourceComponent({
                    name: utils_1.baseName(fsPath),
                    type: this.type.children.types[childTypeId],
                    xml: fsPath,
                    parent: this,
                }, this._tree, this.forceIgnore);
                children.push(childComponent);
            }
        }
        return children;
    }
    // Get the children for non-decomposed types that have an xmlElementName
    // and uniqueIdElement defined in the registry.
    // E.g., CustomLabels, Workflows, SharingRules, AssignmentRules.
    getNonDecomposedChildren() {
        const parsed = this.parseXmlSync();
        const children = [];
        for (const childTypeId of Object.keys(this.type.children.types)) {
            const childType = this.type.children.types[childTypeId];
            const uniqueIdElement = childType.uniqueIdElement;
            if (uniqueIdElement) {
                const xmlPathToChildren = `${this.type.name}.${childType.xmlElementName}`;
                const elements = utils_1.normalizeToArray(ts_types_1.get(parsed, xmlPathToChildren, []));
                const childComponents = elements.map((element) => {
                    return new SourceComponent({
                        name: ts_types_1.getString(element, uniqueIdElement),
                        type: childType,
                        xml: this.xml,
                        parent: this,
                    }, this._tree, this.forceIgnore);
                });
                children.push(...childComponents);
            }
        }
        return children;
    }
    *walk(fsPath) {
        if (!this._tree.isDirectory(fsPath)) {
            yield fsPath;
        }
        else {
            for (const child of this._tree.readDirectory(fsPath)) {
                const childPath = path_1.join(fsPath, child);
                if (this.forceIgnore.denies(childPath)) {
                    continue;
                }
                else if (this._tree.isDirectory(childPath)) {
                    yield* this.walk(childPath);
                }
                else {
                    yield childPath;
                }
            }
        }
    }
    get fullName() {
        if (this.type.ignoreParsedFullName) {
            return this.type.name;
        }
        if (this.parent && this.type.ignoreParentName) {
            return this.name;
        }
        else {
            return `${this.parent ? `${this.parent.fullName}.` : ''}${this.name}`;
        }
    }
    get tree() {
        return this._tree;
    }
    /**
     * Returns whether this component type is supported by the Metadata API
     * and therefore should have an entry added to the manifest.
     *
     * This is defined on the type in the registry. The type is required to
     * be in the registry for proper classification and for possible use in
     * decomposition/recomposition.
     *
     * Default value is true, so the only way to return false is to explicitly
     * set it in the registry as false.
     *
     * E.g., CustomFieldTranslation.
     */
    get isAddressable() {
        return this.type.isAddressable !== false;
    }
}
exports.SourceComponent = SourceComponent;
//# sourceMappingURL=sourceComponent.js.map