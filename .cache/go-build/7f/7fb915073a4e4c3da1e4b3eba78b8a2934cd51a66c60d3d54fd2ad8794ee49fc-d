// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/bill/builds/yay/src/gopath/pkg/mod/github.com/!jguer/go-alpm/v2@v2.0.6/db.go:1:1
// db.go - Functions for database handling.
//
// Copyright (c) 2013 The go-alpm Authors
//
// MIT Licensed. See LICENSE for details.

package alpm

/*
#include <alpm.h>
#include <alpm_list.h>
*/
import _ "unsafe"

import (
	"fmt"
	"io"
	"unsafe"
)

// DB structure representing a alpm database.
type DB struct {
	ptr    * /*line :23:10*/_Ctype_alpm_db_t /*line :23:21*/
	handle Handle
}

// DBList structure representing a alpm database list.
type DBList struct {
	*list
	handle Handle
}

// ForEach executes an action on each DB.
func (l DBList) ForEach(f func(IDB) error) error {
	return l.forEach(func(p unsafe.Pointer) error {
		return f(&DB{(* /*line :36:18*/_Ctype_alpm_db_t /*line :36:29*/)(p), l.handle})
	})
}

// Slice converst DB list to DB slice.
func (l DBList) Slice() []IDB {
	slice := []IDB{}
	_ = l.ForEach(func(db IDB) error {
		slice = append(slice, db)
		return nil
	})
	return slice
}

// SyncDBByName finds a registered database by name.
func (h *Handle) SyncDBByName(name string) (db IDB, err error) {
	dblist, err := h.SyncDBs()
	if err != nil {
		return nil, err
	}
	_ = dblist.ForEach(func(b IDB) error {
		if b.Name() == name {
			db = b
			return io.EOF
		}
		return nil
	})
	if db != nil {
		return db, nil
	}
	return nil, fmt.Errorf("database %s not found", name)
}

// RegisterSyncDB Loads a sync database with given name and signature check level.
func (h *Handle) RegisterSyncDB(dbname string, siglevel SigLevel) (IDB, error) {
	cName := ( /*line :71:11*/_Cfunc_CString /*line :71:19*/)(dbname)
	defer func() func() { _cgo0 := /*line :72:15*/unsafe.Pointer(cName); return func() { _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }}()()

	db := func() *_Ctype_struct___alpm_db_t{ _cgo0 := /*line :74:31*/h.ptr; var _cgo1 *_Ctype_char = /*line :74:38*/cName; var _cgo2 _Ctype_int = _Ctype_int /*line :74:50*/(siglevel); _cgoCheckPointer(_cgo0, nil); return _Cfunc_alpm_register_syncdb(_cgo0, _cgo1, _cgo2); }()
	if db == nil {
		return nil, h.LastError()
	}
	return &DB{db, *h}, nil
}

func (db *DB) Unregister() error {
	ok := func() _Ctype_int{ _cgo0 := /*line :82:29*/db.ptr; _cgoCheckPointer(_cgo0, nil); return _Cfunc_alpm_db_unregister(_cgo0); }()
	if ok != 0 {
		return db.handle.LastError()
	}

	return nil
}

func (h *Handle) UnregisterAllSyncDBs() error {
	ok := func() _Ctype_int{ _cgo0 := /*line :91:38*/h.ptr; _cgoCheckPointer(_cgo0, nil); return _Cfunc_alpm_unregister_all_syncdbs(_cgo0); }()
	if ok != 0 {
		return h.LastError()
	}

	return nil
}

// Name returns name of the db
func (db *DB) Name() string {
	return ( /*line :101:9*/_Cfunc_GoString /*line :101:18*/)(func() *_Ctype_char{ _cgo0 := /*line :101:39*/db.ptr; _cgoCheckPointer(_cgo0, nil); return _Cfunc_alpm_db_get_name(_cgo0); }())
}

// Servers returns host server URL.
func (db *DB) Servers() []string {
	ptr := unsafe.Pointer(func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :106:46*/db.ptr; _cgoCheckPointer(_cgo0, nil); return _Cfunc_alpm_db_get_servers(_cgo0); }())
	return StringList{(*list)(ptr)}.Slice()
}

// SetServers sets server list to use.
func (db *DB) SetServers(servers []string) {
	func() _Ctype_int{ _cgo0 := /*line :112:24*/db.ptr; var _cgo1 *_Ctype_struct___alpm_list_t = /*line :112:32*/nil; _cgoCheckPointer(_cgo0, nil); return _Cfunc_alpm_db_set_servers(_cgo0, _cgo1); }()
	for _, srv := range servers {
		Csrv := ( /*line :114:11*/_Cfunc_CString /*line :114:19*/)(srv)
		defer func() func() { _cgo0 := /*line :115:16*/unsafe.Pointer(Csrv); return func() { _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }}()()
		func() _Ctype_int{ _cgo0 := /*line :116:24*/db.ptr; var _cgo1 *_Ctype_char = /*line :116:32*/Csrv; _cgoCheckPointer(_cgo0, nil); return _Cfunc_alpm_db_add_server(_cgo0, _cgo1); }()
	}
}

// AddServers adds a string to the server list.
func (db *DB) AddServer(server string) {
	Csrv := ( /*line :122:10*/_Cfunc_CString /*line :122:18*/)(server)
	defer func() func() { _cgo0 := /*line :123:15*/unsafe.Pointer(Csrv); return func() { _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }}()()
	func() _Ctype_int{ _cgo0 := /*line :124:23*/db.ptr; var _cgo1 *_Ctype_char = /*line :124:31*/Csrv; _cgoCheckPointer(_cgo0, nil); return _Cfunc_alpm_db_add_server(_cgo0, _cgo1); }()
}

// SetUsage sets the Usage of the database
func (db *DB) SetUsage(usage Usage) {
	func() _Ctype_int{ _cgo0 := /*line :129:22*/db.ptr; var _cgo1 _Ctype_int = _Ctype_int /*line :129:35*/(usage); _cgoCheckPointer(_cgo0, nil); return _Cfunc_alpm_db_set_usage(_cgo0, _cgo1); }()
}

// Name searches a package in db.
func (db *DB) Pkg(name string) IPackage {
	cName := ( /*line :134:11*/_Cfunc_CString /*line :134:19*/)(name)
	defer func() func() { _cgo0 := /*line :135:15*/unsafe.Pointer(cName); return func() { _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }}()()
	ptr := func() *_Ctype_struct___alpm_pkg_t{ _cgo0 := /*line :136:27*/db.ptr; var _cgo1 *_Ctype_char = /*line :136:35*/cName; _cgoCheckPointer(_cgo0, nil); return _Cfunc_alpm_db_get_pkg(_cgo0, _cgo1); }()
	if ptr == nil {
		return nil
	}
	return &Package{ptr, db.handle}
}

// PkgCachebyGroup returns a PackageList of packages belonging to a group
func (l DBList) FindGroupPkgs(name string) IPackageList {
	cName := ( /*line :145:11*/_Cfunc_CString /*line :145:19*/)(name)
	defer func() func() { _cgo0 := /*line :146:15*/unsafe.Pointer(cName); return func() { _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }}()()
	pkglist := (* /*line :147:15*/_Ctype_struct___alpm_list_t /*line :147:37*/)(unsafe.Pointer(l.list))
	pkgcache := (*list)(unsafe.Pointer(func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :148:60*/pkglist; var _cgo1 *_Ctype_char = /*line :148:69*/cName; _cgoCheckPointer(_cgo0, nil); return _Cfunc_alpm_find_group_pkgs(_cgo0, _cgo1); }()))
	return PackageList{pkgcache, l.handle}
}

// PkgCache returns the list of packages of the database
func (db *DB) PkgCache() IPackageList {
	pkgcache := (*list)(unsafe.Pointer(func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :154:60*/db.ptr; _cgoCheckPointer(_cgo0, nil); return _Cfunc_alpm_db_get_pkgcache(_cgo0); }()))
	return PackageList{pkgcache, db.handle}
}

// Search returns a list of packages matching the targets.
// In case of error the Package List will be nil
func (db *DB) Search(targets []string) IPackageList {
	var needles * /*line :161:15*/_Ctype_alpm_list_t /*line :161:28*/ = nil
	var ret * /*line :162:11*/_Ctype_alpm_list_t /*line :162:24*/ = nil

	for _, str := range targets {
		needles = func() *_Ctype_struct___alpm_list_t{ _cgo0 := /*line :165:29*/needles; _cgo1 := /*line :165:38*/unsafe.Pointer(_Cfunc_CString /*line :165:62*/(str)); _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return _Cfunc_alpm_list_add(_cgo0, _cgo1); }()
	}

	ok := func() _Ctype_int{ _cgo0 := /*line :168:25*/db.ptr; _cgo1 := /*line :168:33*/needles; _cgoBase2 := /*line :168:42*/&ret; _cgo2 := _cgoBase2; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return _Cfunc_alpm_db_search(_cgo0, _cgo1, _cgo2); }() //nolint
	if ok != 0 {
		return PackageList{nil, db.handle}
	}

	func() { _cgo0 := /*line :173:19*/needles; _cgoCheckPointer(_cgo0, nil); _Cfunc_alpm_list_free(_cgo0); }()
	return PackageList{(*list)(unsafe.Pointer(ret)), db.handle}
}
