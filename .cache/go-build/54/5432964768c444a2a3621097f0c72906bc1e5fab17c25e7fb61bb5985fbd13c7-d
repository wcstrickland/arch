// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/bill/builds/yay/src/gopath/pkg/mod/github.com/!jguer/go-alpm/v2@v2.0.6/callbacks.go:1:1
// callbacks.go - Handles libalpm callbacks.
//
// Copyright (c) 2013 The go-alpm Authors
//
// MIT Licensed. See LICENSE for details.

package alpm

/*
#include "callbacks.h"
*/
import _ "unsafe"
import "unsafe"

var DefaultLogLevel = LogWarning

type (
	logCallbackSig      func(interface{}, LogLevel, string)
	questionCallbackSig func(interface{}, QuestionAny)
	callbackContextPool map[ /*line :20:26*/_Ctype_go_ctx_t /*line :20:36*/]interface{}
)

var (
	logCallbackContextPool      callbackContextPool = callbackContextPool{}
	questionCallbackContextPool callbackContextPool = callbackContextPool{}
)

func DefaultLogCallback(ctx interface{}, lvl LogLevel, s string) {
	if lvl <= DefaultLogLevel {
		print("go-alpm: ", s)
	}
}

//export go_alpm_go_log_callback
func go_alpm_go_log_callback(goCb unsafe.Pointer, goCtx  /*line :35:57*/_Ctype_go_ctx_t /*line :35:67*/, lvl  /*line :35:73*/_Ctype_alpm_loglevel_t /*line :35:90*/, s * /*line :35:95*/_Ctype_char /*line :35:101*/) {
	cb := *(*logCallbackSig)(goCb)
	ctx := logCallbackContextPool[goCtx]

	cb(ctx, LogLevel(lvl), ( /*line :39:25*/_Cfunc_GoString /*line :39:34*/)(s))
}

//export go_alpm_go_question_callback
func go_alpm_go_question_callback(goCb unsafe.Pointer, goCtx  /*line :43:62*/_Ctype_go_ctx_t /*line :43:72*/, question * /*line :43:84*/_Ctype_alpm_question_t /*line :43:101*/) {
	q := (* /*line :44:9*/_Ctype_alpm_question_any_t /*line :44:30*/)(unsafe.Pointer(question))

	cb := *(*questionCallbackSig)(goCb)
	ctx := questionCallbackContextPool[goCtx]

	cb(ctx, QuestionAny{q})
}

func (h *Handle) SetLogCallback(cb logCallbackSig, ctx interface{}) {
	goCb := unsafe.Pointer(&cb)
	goCtx :=  /*line :54:11*/_Ctype_go_ctx_t /*line :54:21*/(h.ptr)

	logCallbackContextPool[goCtx] = ctx

	func() { _cgo0 := /*line :58:29*/h.ptr; _cgo1 := /*line :58:36*/goCb; _cgo2 := /*line :58:42*/goCtx; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgo2, nil); _Cfunc_go_alpm_set_log_callback(_cgo0, _cgo1, _cgo2); }()
}

func (h *Handle) SetQuestionCallback(cb questionCallbackSig, ctx interface{}) {
	goCb := unsafe.Pointer(&cb)
	goCtx :=  /*line :63:11*/_Ctype_go_ctx_t /*line :63:21*/(h.ptr)

	questionCallbackContextPool[goCtx] = ctx

	func() { _cgo0 := /*line :67:34*/h.ptr; _cgo1 := /*line :67:41*/goCb; _cgo2 := /*line :67:47*/goCtx; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgo2, nil); _Cfunc_go_alpm_set_question_callback(_cgo0, _cgo1, _cgo2); }()
}
