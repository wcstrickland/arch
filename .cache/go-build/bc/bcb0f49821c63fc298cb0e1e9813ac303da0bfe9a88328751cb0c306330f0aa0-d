// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/bill/builds/yay/src/gopath/pkg/mod/github.com/!jguer/go-alpm/v2@v2.0.6/sync.go:1:1
// db.go - Functions for database handling.
//
// Copyright (c) 2013 The go-alpm Authors
//
// MIT Licensed. See LICENSE for details.

package alpm

/*
#include <alpm.h>
*/
import _ "unsafe"

import "unsafe"

// SyncNewVersion checks if there is a new version of the
// package in a given DBlist.
func (pkg *Package) SyncNewVersion(l IDBList) IPackage {
	ptr := func() *_Ctype_struct___alpm_pkg_t{ _cgo0 := /*line :19:37*/pkg.pmpkg; _cgo1 := /*line :20:3*/(*_Ctype_alpm_list_t /*line :20:18*/)(unsafe.Pointer(l.(*DBList).list)); _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return _Cfunc_alpm_sync_get_new_version(_cgo0, _cgo1); }()
	if ptr == nil {
		return nil
	}
	return &Package{ptr, l.(*DBList).handle}
}

func (h *Handle) SyncSysupgrade(enableDowngrade bool) error {
	intEnableDowngrade :=  /*line :28:24*/_Ctype_int /*line :28:29*/(0)

	if enableDowngrade {
		intEnableDowngrade =  /*line :31:24*/_Ctype_int /*line :31:29*/(1)
	}

	ret := func() _Ctype_int{ _cgo0 := /*line :34:32*/h.ptr; var _cgo1 _Ctype_int = /*line :34:39*/intEnableDowngrade; _cgoCheckPointer(_cgo0, nil); return _Cfunc_alpm_sync_sysupgrade(_cgo0, _cgo1); }()
	if ret != 0 {
		return h.LastError()
	}

	return nil
}
