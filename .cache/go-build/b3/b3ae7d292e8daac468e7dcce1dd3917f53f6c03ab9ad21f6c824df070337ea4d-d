// Code generated by cmd/cgo; DO NOT EDIT.

//line /home/bill/builds/yay/src/gopath/pkg/mod/github.com/!jguer/go-alpm/v2@v2.0.6/deps.go:1:1
package alpm

/*
#include <alpm.h>
*/
import _ "unsafe"

import (
	"fmt"
	"unsafe"
)

// FindSatisfier searches a DBList for a package that satisfies depstring
// Example "glibc>=2.12"
func (l DBList) FindSatisfier(depstring string) (IPackage, error) {
	cDepString := ( /*line :16:16*/_Cfunc_CString /*line :16:24*/)(depstring)
	defer func() func() { _cgo0 := /*line :17:15*/unsafe.Pointer(cDepString); return func() { _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }}()()

	pkgList := (* /*line :19:15*/_Ctype_struct___alpm_list_t /*line :19:37*/)(unsafe.Pointer(l.list))
	pkgHandle := (* /*line :20:17*/_Ctype_struct___alpm_handle_t /*line :20:41*/)(unsafe.Pointer(l.handle.ptr))

	ptr := func() *_Ctype_struct___alpm_pkg_t{ _cgo0 := /*line :22:35*/pkgHandle; _cgo1 := /*line :22:46*/pkgList; var _cgo2 *_Ctype_char = /*line :22:55*/cDepString; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return _Cfunc_alpm_find_dbs_satisfier(_cgo0, _cgo1, _cgo2); }()
	if ptr == nil {
		return nil,
			fmt.Errorf("unable to satisfy dependency %s in DBlist", depstring)
	}

	return &Package{ptr, l.handle}, nil
}

// FindSatisfier finds a package that satisfies depstring from PkgList
func (l PackageList) FindSatisfier(depstring string) (IPackage, error) {
	cDepString := ( /*line :33:16*/_Cfunc_CString /*line :33:24*/)(depstring)
	defer func() func() { _cgo0 := /*line :34:15*/unsafe.Pointer(cDepString); return func() { _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }}()()

	pkgList := (* /*line :36:15*/_Ctype_struct___alpm_list_t /*line :36:37*/)(unsafe.Pointer(l.list))

	ptr := func() *_Ctype_struct___alpm_pkg_t{ _cgo0 := /*line :38:31*/pkgList; var _cgo1 *_Ctype_char = /*line :38:40*/cDepString; _cgoCheckPointer(_cgo0, nil); return _Cfunc_alpm_find_satisfier(_cgo0, _cgo1); }()
	if ptr == nil {
		return nil,
			fmt.Errorf("unable to find dependency %s in PackageList", depstring)
	}

	return &Package{ptr, l.handle}, nil
}
